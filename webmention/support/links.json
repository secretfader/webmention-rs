{
  "type": "feed",
  "name": "Webmentions",
  "children": [
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Sia Karamalegos",
        "photo": "https://webmention.io/avatar/sia.codes/538d0ea5bbca455d538880e72ea06f3f2d390b22270a67ebf11466030806a70f.jpg",
        "url": "https://sia.codes/"
      },
      "url": "https://twitter.com/TheGreenGreek/status/1198282993678376961#favorited-by-9436992",
      "published": "2019-11-22T00:00:00+00:00",
      "wm-received": "2019-11-23T18:06:36Z",
      "wm-id": 727293,
      "wm-source": "https://sia.codes/posts/webmentions-eleventy-in-depth/",
      "wm-target": "http://webmention.io",
      "name": "An In-Depth Tutorial of Webmentions + Eleventy",
      "summary": {
        "content-type": "text/plain",
        "value": "Add Webmentions to your Eleventy static site with this step-by-step tutorial."
      },
      "content": {
        "content-type": "text/html",
        "value": "<p>I am a huge fan of the static site generator <a href=\"https://www.11ty.io/\">Eleventy</a> so far, and I was super excited to try out <a href=\"https://indieweb.org/Webmention\">Webmentions</a> with them.</p>\n<blockquote>\n<p>Webmention is a web standard for mentions and conversations across the web, a powerful building block that is used for a growing federated network of comments, likes, reposts, and other rich interactions across the decentralized social web.<br />\n—from <a href=\"https://indieweb.org/Webmention\">IndieWeb.org</a></p>\n</blockquote>\n<p>They are a cool tool for enabling social interactions when you host your own content. Max Böck wrote an excellent post, <a href=\"https://mxb.dev/blog/using-webmentions-on-static-sites/\">Static Indieweb pt2: Using Webmentions</a>, which walks through his implementation. He also created an Eleventy starter, <a href=\"https://github.com/maxboeck/eleventy-webmentions\">eleventy-webmentions</a>, which is a basic starter template with webmentions support.</p>\n<p>So why am I writing this post? Sadly, I started with the <a href=\"https://github.com/11ty/eleventy-base-blog\">eleventy-base-blog</a>, and didn't notice the <a href=\"https://github.com/maxboeck/eleventy-webmentions\">eleventy-webmentions</a> starter until after I had already built my site. I also struggled to fully build out the functionality, partly because I'm still an Eleventy n00b. So I wanted to share the detailed steps I used in the hopes that it will help more of you join the Indie Web.</p>\n<p>The perspective of this post is adding webmentions to an Eleventy site after the fact. The files, folders, and config architecture match the <code>eleventy-base-blog</code>, but you can likely use this as a starting point for any Eleventy site. Make sure you watch out for spots where your analogous architecture may be different.</p>\n<p>The code in this post is a mash up of Max Böck's original post and <a href=\"https://github.com/maxboeck/mxb\">personal site</a>, the <a href=\"https://github.com/maxboeck/eleventy-webmentions\">eleventy-webmentions</a> starter, Zach Leatherman's <a href=\"https://github.com/zachleat/zachleat.com\">personal site</a>, and the edits I made during my implementation. I am hugely grateful for their work, as I never would have gotten this far without it.</p>\n<h2>Step 1: Sign up for webmentions <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#step-1%3A-sign-up-for-webmentions\">#</a>\n</h2>\n<p>First, we need to sign up with <a href=\"http://webmention.io\">webmention.io</a>, the third-party service that lets us use the power of webmentions on static sites.</p>\n<ol><li>Set up IndieAuth so that webmention will know that you control your domain. Follow the setup instructions <a href=\"https://indieauth.com/setup\">on their site</a>.</li>\n<li>Go to <a href=\"https://webmention.io/\">webmention.io/</a>.</li>\n<li>Enter your website's URL in the \"Web Sign-In\" input, and click \"Sign in\".</li>\n</ol><p>If your sign in was successful, you should be directed to the webmentions dashboard where you will be given two <code>&lt;link&gt;</code> tags. You should put these in the <code>&lt;head&gt;</code> of your website:</p>\n<pre><code><span><span>&lt;!-- _includes/layouts/base.njk --&gt;</span></span><br /><span><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>webmention<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://webmention.io/sia.codes/webmention<span>\"</span></span> <span>/&gt;</span></span></span><br /><span><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>pingback<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://webmention.io/sia.codes/xmlrpc<span>\"</span></span> <span>/&gt;</span></span></span></code></pre>\n<p>You'll also be given an API key. We want to safely store that in our local environment variables. Add <code>dotenv</code> for easily getting and setting env variables:</p>\n<pre><code><span>$ <span>npm</span> <span>install</span> dotenv</span></code></pre>\n<p>Create a <code>.env</code> file in the root of your project, and add your <a href=\"http://Webmention.io\">Webmention.io</a> API key</p>\n<pre><code><span><span>WEBMENTION_IO_TOKEN</span><span>=</span>y0urKeyHeRe</span></code></pre>\n<p>Don't forget to add it to your <code>.gitignore</code> file. While we are here, let's add the <code>_cache/</code> folder which will be created when we first fetch webmentions:</p>\n<pre><code><span>_cache/</span><br /><span>_site/</span><br /><span>node_modules/</span><br /><span>.env</span></code></pre>\n<p>You probably want some content in your webmentions. If you use Twitter, <a href=\"https://brid.gy/\">Bridgy</a> is a great way to bring in mentions from Twitter. First make sure your website is listed in your profile, then link it.</p>\n<h2>How it's all going to work <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#how-it's-all-going-to-work\">#</a>\n</h2>\n<p>When we run a build with <code>NODE_ENV=production</code>, we are going to fetch new webmentions from the last time we fetched. These will be saved in <code>_cache/webmentions.json</code>. These mentions come from the <a href=\"https://github.com/aaronpk/webmention.io#api\">webmention.io API</a>.</p>\n<p>When we do any build, for each page:</p>\n<ul><li>From the webmentions cache in <code>_cache/webmentions.json</code>, only keep webmentions that match the URL of the page (for me, this is each blog post).</li>\n<li>Use a <code>webmentionsByType</code> function to filter for one type (e.g., likes or replies)</li>\n<li>Use a <code>size</code> function to calculate the count of those mentions by type</li>\n<li>Render the count with mention type as a heading (e.g., \"7 Replies\")</li>\n<li>Render a list of the mentions of that type (e.g., linked Twitter profile pictures representing each like)</li>\n</ul><h2>Fetching webmentions <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#fetching-webmentions\">#</a>\n</h2>\n<p>First, we need to set up our domain as another property in our <code>_data/metadata.json</code>. Let's also add our root URL for use later:</p>\n<pre><code><span><span>// _data/metadata.json</span></span><br /><span><span>{</span></span><br /><span>  <span>//...other metadata</span></span><br /><span>  <span>\"domain\"</span><span>:</span> <span>\"sia.codes\"</span><span>,</span></span><br /><span>  <span>\"url\"</span><span>:</span> <span>\"https://sia.codes\"</span></span><br /><span><span>}</span></span></code></pre>\n<p>Next, we'll add a few more dependencies:</p>\n<pre><code><span>$ <span>npm</span> <span>install</span> lodash node-fetch</span></code></pre>\n<p>And update our <code>build</code> script to set the <code>NODE_ENV</code> in our <code>package.json</code>:</p>\n<pre><code><span><span>// package.json</span></span><br /><span><span>{</span></span><br /><span>  <span>// ... more config</span></span><br /><span>  <span>\"scripts\"</span><span>:</span> <span>{</span></span><br /><span>    <span>\"build\"</span><span>:</span> <span>\"NODE_ENV=production npx eleventy\"</span><span>,</span></span><br /><span>    <span>// more scripts...</span></span><br /><span><span>}</span></span></code></pre>\n<p>Now we can focus on the fetch code. Okay, okay, I know this next file is beaucoup long, but I thought it was more difficult to understand out of context. Here are the general steps happening in the code:</p>\n<ol><li>Read any mentions from the file cache at <code>_cache/webmentions.json</code>.</li>\n<li>If our environment is \"production\", fetch new webmentions since the last time we fetched. Merge them with the cached ones and save to the cache file. Return the merged set of mentions.</li>\n<li>If our envinroment is not \"production\", return the cached mentions from the file</li>\n</ol><pre><code><span><span>// _data/webmentions.js</span></span><br /><span><span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span></span><br /><span><span>const</span> fetch <span>=</span> <span>require</span><span>(</span><span>'node-fetch'</span><span>)</span></span><br /><span><span>const</span> unionBy <span>=</span> <span>require</span><span>(</span><span>'lodash/unionBy'</span><span>)</span></span><br /><span><span>const</span> domain <span>=</span> <span>require</span><span>(</span><span>'./metadata.json'</span><span>)</span><span>.</span>domain</span><br /><span></span><br /><span><span>// Load .env variables with dotenv</span></span><br /><span><span>require</span><span>(</span><span>'dotenv'</span><span>)</span><span>.</span><span>config</span><span>(</span><span>)</span></span><br /><span></span><br /><span><span>// Define Cache Location and API Endpoint</span></span><br /><span><span>const</span> <span>CACHE_FILE_PATH</span> <span>=</span> <span>'_cache/webmentions.json'</span></span><br /><span><span>const</span> <span>API</span> <span>=</span> <span>'https://webmention.io/api'</span></span><br /><span><span>const</span> <span>TOKEN</span> <span>=</span> process<span>.</span>env<span>.</span><span>WEBMENTION_IO_TOKEN</span></span><br /><span></span><br /><span><span>async</span> <span>function</span> <span>fetchWebmentions</span><span>(</span><span>since<span>,</span> perPage <span>=</span> <span>10000</span></span><span>)</span> <span>{</span></span><br /><span>  <span>// If we dont have a domain name or token, abort</span></span><br /><span>  <span>if</span> <span>(</span><span>!</span>domain <span>||</span> <span>!</span><span>TOKEN</span><span>)</span> <span>{</span></span><br /><span>    console<span>.</span><span>warn</span><span>(</span><span>'&gt;&gt;&gt; unable to fetch webmentions: missing domain or token'</span><span>)</span></span><br /><span>    <span>return</span> <span>false</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>let</span> url <span>=</span> <span><span>`</span><span><span>${</span><span>API</span><span>}</span></span><span>/mentions.jf2?domain=</span><span><span>${</span>domain<span>}</span></span><span>&amp;token=</span><span><span>${</span><span>TOKEN</span><span>}</span></span><span>&amp;per-page=</span><span><span>${</span>perPage<span>}</span></span><span>`</span></span></span><br /><span>  <span>if</span> <span>(</span>since<span>)</span> url <span>+=</span> <span><span>`</span><span>&amp;since=</span><span><span>${</span>since<span>}</span></span><span>`</span></span> <span>// only fetch new mentions</span></span><br /><span></span><br /><span>  <span>const</span> response <span>=</span> <span>await</span> <span>fetch</span><span>(</span>url<span>)</span></span><br /><span>  <span>if</span> <span>(</span>response<span>.</span>ok<span>)</span> <span>{</span></span><br /><span>    <span>const</span> feed <span>=</span> <span>await</span> response<span>.</span><span>json</span><span>(</span><span>)</span></span><br /><span>    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>&gt;&gt;&gt; </span><span><span>${</span>feed<span>.</span>children<span>.</span>length<span>}</span></span><span> new webmentions fetched from </span><span><span>${</span><span>API</span><span>}</span></span><span>`</span></span><span>)</span></span><br /><span>    <span>return</span> feed</span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>return</span> <span>null</span></span><br /><span><span>}</span></span><br /><span></span><br /><span><span>// Merge fresh webmentions with cached entries, unique per id</span></span><br /><span><span>function</span> <span>mergeWebmentions</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span></span><br /><span>  <span>return</span> <span>unionBy</span><span>(</span>a<span>.</span>children<span>,</span> b<span>.</span>children<span>,</span> <span>'wm-id'</span><span>)</span></span><br /><span><span>}</span></span><br /><span></span><br /><span><span>// save combined webmentions in cache file</span></span><br /><span><span>function</span> <span>writeToCache</span><span>(</span><span>data</span><span>)</span> <span>{</span></span><br /><span>  <span>const</span> dir <span>=</span> <span>'_cache'</span></span><br /><span>  <span>const</span> fileContent <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>,</span> <span>null</span><span>,</span> <span>2</span><span>)</span></span><br /><span>  <span>// create cache folder if it doesnt exist already</span></span><br /><span>  <span>if</span> <span>(</span><span>!</span>fs<span>.</span><span>existsSync</span><span>(</span>dir<span>)</span><span>)</span> <span>{</span></span><br /><span>    fs<span>.</span><span>mkdirSync</span><span>(</span>dir<span>)</span></span><br /><span>  <span>}</span></span><br /><span>  <span>// write data to cache json file</span></span><br /><span>  fs<span>.</span><span>writeFile</span><span>(</span><span>CACHE_FILE_PATH</span><span>,</span> fileContent<span>,</span> <span>err</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>if</span> <span>(</span>err<span>)</span> <span>throw</span> err</span><br /><span>    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>&gt;&gt;&gt; webmentions cached to </span><span><span>${</span><span>CACHE_FILE_PATH</span><span>}</span></span><span>`</span></span><span>)</span></span><br /><span>  <span>}</span><span>)</span></span><br /><span><span>}</span></span><br /><span></span><br /><span><span>// get cache contents from json file</span></span><br /><span><span>function</span> <span>readFromCache</span><span>(</span><span>)</span> <span>{</span></span><br /><span>  <span>if</span> <span>(</span>fs<span>.</span><span>existsSync</span><span>(</span><span>CACHE_FILE_PATH</span><span>)</span><span>)</span> <span>{</span></span><br /><span>    <span>const</span> cacheFile <span>=</span> fs<span>.</span><span>readFileSync</span><span>(</span><span>CACHE_FILE_PATH</span><span>)</span></span><br /><span>    <span>return</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>cacheFile<span>)</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>// no cache found.</span></span><br /><span>  <span>return</span> <span>{</span></span><br /><span>    lastFetched<span>:</span> <span>null</span><span>,</span></span><br /><span>    children<span>:</span> <span>[</span><span>]</span></span><br /><span>  <span>}</span></span><br /><span><span>}</span></span><br /><span></span><br /><span>module<span>.</span><span>exports</span> <span>=</span> <span>async</span> <span>function</span> <span>(</span><span>)</span> <span>{</span></span><br /><span>  console<span>.</span><span>log</span><span>(</span><span>'&gt;&gt;&gt; Reading webmentions from cache...'</span><span>)</span><span>;</span></span><br /><span></span><br /><span>  <span>const</span> cache <span>=</span> <span>readFromCache</span><span>(</span><span>)</span></span><br /><span></span><br /><span>  <span>if</span> <span>(</span>cache<span>.</span>children<span>.</span>length<span>)</span> <span>{</span></span><br /><span>    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>&gt;&gt;&gt; </span><span><span>${</span>cache<span>.</span>children<span>.</span>length<span>}</span></span><span> webmentions loaded from cache</span><span>`</span></span><span>)</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>// Only fetch new mentions in production</span></span><br /><span>  <span>if</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'production'</span><span>)</span> <span>{</span></span><br /><span>    console<span>.</span><span>log</span><span>(</span><span>'&gt;&gt;&gt; Checking for new webmentions...'</span><span>)</span><span>;</span></span><br /><span>    <span>const</span> feed <span>=</span> <span>await</span> <span>fetchWebmentions</span><span>(</span>cache<span>.</span>lastFetched<span>)</span></span><br /><span>    <span>if</span> <span>(</span>feed<span>)</span> <span>{</span></span><br /><span>      <span>const</span> webmentions <span>=</span> <span>{</span></span><br /><span>        lastFetched<span>:</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toISOString</span><span>(</span><span>)</span><span>,</span></span><br /><span>        children<span>:</span> <span>mergeWebmentions</span><span>(</span>cache<span>,</span> feed<span>)</span></span><br /><span>      <span>}</span></span><br /><span></span><br /><span>      <span>writeToCache</span><span>(</span>webmentions<span>)</span></span><br /><span>      <span>return</span> webmentions</span><br /><span>    <span>}</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>return</span> cache</span><br /><span><span>}</span></span></code></pre>\n<h2>Filters for build <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#filters-for-build\">#</a>\n</h2>\n<p>Now that we've populated our webmentions cache, we need to use it. First we have to generate the functions, or \"filters\" that Eleventy will use to build our templates.</p>\n<p>First, I like keeping some filters separated from the main Eleventy config so that it doesn't get too bogged down. The separate filters file will define each of our filters in an object. The keys are the filter names and the values are the filter functions. In <code>_11ty/filters.js</code>, add each of our new filter functions:</p>\n<pre><code><span><span>// _11ty/filters.js</span></span><br /><span><span>const</span> <span>{</span> DateTime <span>}</span> <span>=</span> <span>require</span><span>(</span><span>\"luxon\"</span><span>)</span><span>;</span> <span>// Already in eleventy-base-blog</span></span><br /><span></span><br /><span>module<span>.</span>exports <span>=</span> <span>{</span></span><br /><span>  <span>getWebmentionsForUrl</span><span>:</span> <span>(</span><span>webmentions<span>,</span> url</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> webmentions<span>.</span>children<span>.</span><span>filter</span><span>(</span><span>entry</span> <span>=&gt;</span> entry<span>[</span><span>'wm-target'</span><span>]</span> <span>===</span> url<span>)</span></span><br /><span>  <span>}</span><span>,</span></span><br /><span>  <span>size</span><span>:</span> <span>(</span><span>mentions</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> <span>!</span>mentions <span>?</span> <span>0</span> <span>:</span> mentions<span>.</span>length</span><br /><span>  <span>}</span><span>,</span></span><br /><span>  <span>webmentionsByType</span><span>:</span> <span>(</span><span>mentions<span>,</span> mentionType</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> mentions<span>.</span><span>filter</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>!</span><span>!</span>entry<span>[</span>mentionType<span>]</span><span>)</span></span><br /><span>  <span>}</span><span>,</span></span><br /><span>  readableDateFromISO<span>:</span> <span>(</span>dateStr<span>,</span> formatStr <span>=</span> <span>\"dd LLL yyyy 'at' hh:mma\"</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> DateTime<span>.</span><span>fromISO</span><span>(</span>dateStr<span>)</span><span>.</span><span>toFormat</span><span>(</span>formatStr<span>)</span><span>;</span></span><br /><span>  <span>}</span></span><br /><span><span>}</span></span></code></pre>\n<p>Now to use these new filters, in our <code>.eleventy.js</code>, we need to loop through the keys of that filters object to add each filter to our Eleventy config:</p>\n<pre><code><span><span>// .eleventy.js</span></span><br /><span><span>// ...Other imports</span></span><br /><span><span>const</span> filters <span>=</span> <span>require</span><span>(</span><span>'./_11ty/filters'</span><span>)</span></span><br /><span></span><br /><span>module<span>.</span><span>exports</span> <span>=</span> <span>function</span><span>(</span><span>eleventyConfig</span><span>)</span> <span>{</span></span><br /><span>  <span>// Filters</span></span><br /><span>  Object<span>.</span><span>keys</span><span>(</span>filters<span>)</span><span>.</span><span>forEach</span><span>(</span><span>filterName</span> <span>=&gt;</span> <span>{</span></span><br /><span>    eleventyConfig<span>.</span><span>addFilter</span><span>(</span>filterName<span>,</span> filters<span>[</span>filterName<span>]</span><span>)</span></span><br /><span>  <span>}</span><span>)</span></span><br /><span></span><br /><span>  <span>// Other configs...</span></span></code></pre>\n<p>I do not have a sanitize HTML filter because I noticed the content data has a <code>text</code> field that is already sanitized. Maybe this is new or not true for all webmentions. I'll update this post if I add it in.</p>\n<h2>Rendering mentions <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#rendering-mentions\">#</a>\n</h2>\n<p>Now we're ready to put it all together and render our webmentions. I put them at the bottom of each blog post, so in my <code>_includes/layouts/post.njk</code>, I add a new section for the webmentions. Here, we are setting a variable called <code>webmentionUrl</code> to the page's full URL, and passing it into the partial for the <code>webmentions.njk</code> template:</p>\n<pre><code><span><span>&lt;!-- _includes/layouts/post.njk --&gt;</span></span><br /><span><span><span><span>&lt;</span>section</span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>h2</span><span>&gt;</span></span>Webmentions<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span></span><br /><span>  {% set webmentionUrl %}{{ page.url | url | absoluteUrl(site.url) }}{% endset %}</span><br /><span>  {% include 'webmentions.njk' %}</span><br /><span><span><span><span>&lt;/</span>section</span><span>&gt;</span></span></span></code></pre>\n<p>Now we can write the webmentions template. In this example, I will show links, retweets, and replies. First, I set all of the variables I will need for rendering in a bit:</p>\n<pre><code><span><span>&lt;!-- _includes/webmentions.njk --&gt;</span></span><br /><span>  <span>&lt;!-- Filter the cached mentions to only include ones matching the post's url --&gt;</span></span><br /><span>  {% set mentions = webmentions | getWebmentionsForUrl(metadata.url + webmentionUrl) %}</span><br /><span>  <span>&lt;!-- Set reposts as mentions that are `repost-of`  --&gt;</span></span><br /><span>  {% set reposts = mentions | webmentionsByType('repost-of') %}</span><br /><span>  <span>&lt;!-- Count the total reposts --&gt;</span></span><br /><span>  {% set repostsSize = reposts | size %}</span><br /><span>  <span>&lt;!-- Set likes as mentions that are `like-of`  --&gt;</span></span><br /><span>  {% set likes = mentions | webmentionsByType('like-of') %}</span><br /><span>  <span>&lt;!-- Count the total likes --&gt;</span></span><br /><span>  {% set likesSize = likes | size %}</span><br /><span>  <span>&lt;!-- Set replies as mentions that are `in-reply-to`  --&gt;</span></span><br /><span>  {% set replies = mentions | webmentionsByType('in-reply-to')  %}</span><br /><span>  <span>&lt;!-- Count the total replies --&gt;</span></span><br /><span>  {% set repliesSize = replies | size  %}</span></code></pre>\n<p>With our variables set, we can now use that data for rendering. Here I'll walk through only \"replies\", but feel free to see how I handled the remaining sets in <a href=\"https://gist.github.com/siakaramalegos/b1f7ded21f9ecddaee91e3f6d88e2e48\">this gist</a>.</p>\n<p>Since replies are more complex than just rendering a photo and link, I call another template to render the individual webmention. Here we render the count of replies and conditionally plural-ify the word \"Reply\". Then we loop through the reply webmentions to render them with a new nunjucks partial:</p>\n<pre><code><span><span>&lt;!-- _includes/webmentions.njk --&gt;</span></span><br /><span><span>&lt;!-- ...setting variables and other markup --&gt;</span></span><br /><span>{% if repliesSize &gt; 0 %}</span><br /><span><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>webmention-replies<span>\"</span></span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>h3</span><span>&gt;</span></span>{{ repliesSize }} {% if repliesSize == \"1\" %}Reply{% else %}Replies{% endif %}<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span></span><br /><span></span><br /><span>  {% for webmention in replies %}</span><br /><span>    {% include 'webmention.njk' %}</span><br /><span>  {% endfor %}</span><br /><span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span></span><br /><span>{% endif %}</span></code></pre>\n<p>Finally, we can render our replies using that new partial for a single reply webmention. Here, if the author has a photo, we show it, otherwise we show an avatar. We also conditionally show their name if it exists, otherwise we show \"Anonymous\". We use our <code>readableDateFromISO</code> filter to show a human-friendly published date, and finally render the text of the webmention:</p>\n<pre><code><span><span>&lt;!-- _includes/webmention.njk --&gt;</span></span><br /><span><span><span><span>&lt;</span>article</span> <span>class</span><span><span>=</span><span>\"</span>webmention<span>\"</span></span> <span>id</span><span><span>=</span><span>\"</span>webmention-{{ webmention['wm-id'] }}<span>\"</span></span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>webmention__meta<span>\"</span></span><span>&gt;</span></span></span><br /><span>    {% if webmention.author %}</span><br /><span>      {% if webmention.author.photo %}</span><br /><span>      <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>{{ webmention.author.photo }}<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>{{ webmention.author.name }}<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>48<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>48<span>\"</span></span> <span>loading</span><span><span>=</span><span>\"</span>lazy<span>\"</span></span><span>&gt;</span></span></span><br /><span>      {% else %}</span><br /><span>      <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>{{ '/img/avatar.svg' | url }}<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>48<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>48<span>\"</span></span><span>&gt;</span></span></span><br /><span>      {% endif %}</span><br /><span>      <span><span><span>&lt;</span>span</span><span>&gt;</span></span></span><br /><span>        <span><span><span>&lt;</span>a</span> <span>class</span><span><span>=</span><span>\"</span>h-card u-url<span>\"</span></span> <span>{%</span> <span>if</span> <span>webmention.url</span> <span>%}href</span><span><span>=</span><span>\"</span>{{ webmention.url }}<span>\"</span></span> <span>{%</span> <span>endif</span> <span>%}</span> <span>target</span><span><span>=</span><span>\"</span>_blank<span>\"</span></span> <span>rel</span><span><span>=</span><span>\"</span>noopener noreferrer<span>\"</span></span><span>&gt;</span></span><span><span><span>&lt;</span>strong</span> <span>class</span><span><span>=</span><span>\"</span>p-name<span>\"</span></span><span>&gt;</span></span>{{ webmention.author.name }}<span><span><span>&lt;/</span>strong</span><span>&gt;</span></span><span><span><span>&lt;/</span>a</span><span>&gt;</span></span></span><br /><span>      <span><span><span>&lt;/</span>span</span><span>&gt;</span></span></span><br /><span>    {% else %}</span><br /><span>      <span><span><span>&lt;</span>span</span><span>&gt;</span></span></span><br /><span>        <span><span><span>&lt;</span>strong</span><span>&gt;</span></span>Anonymous<span><span><span>&lt;/</span>strong</span><span>&gt;</span></span></span><br /><span>      <span><span><span>&lt;/</span>span</span><span>&gt;</span></span></span><br /><span>    {% endif %}</span><br /><span></span><br /><span>    {% if webmention.published %}</span><br /><span>        <span><span><span>&lt;</span>time</span> <span>class</span><span><span>=</span><span>\"</span>postlist-date<span>\"</span></span> <span>datetime</span><span><span>=</span><span>\"</span>{{ webmention.published }}<span>\"</span></span><span>&gt;</span></span></span><br /><span>            {{ webmention.published | readableDateFromISO }}</span><br /><span>        <span><span><span>&lt;/</span>time</span><span>&gt;</span></span></span><br /><span>    {% endif %}</span><br /><span>  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>div</span><span>&gt;</span></span></span><br /><span>      {{ webmention.content.text }}</span><br /><span>  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span></span><br /><span><span><span><span>&lt;/</span>article</span><span>&gt;</span></span></span></code></pre>\n<h2>Geronimo <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#geronimo\">#</a>\n</h2>\n<p>Does it work?!?! We can finally test it out. First run <code>npm run build</code> to generate an initial list of webmentions that is saved to the <code>_cache/webmentions.json</code> file. Then run your local development server and see if it worked! Of course, you'll need to have at least one webmention associated with a post to see anything. 😁</p>\n<p>You can see the result of my own implementation below. Good luck! Let me know how it turns out or if you find in bugs or errors in this post!</p>\n<h2>Continue your journey by using Microformats <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#continue-your-journey-by-using-microformats\">#</a>\n</h2>\n<p>Keith Grant has a great write-up in his article <a href=\"https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/\">Adding Webmention Support to a Static Site</a>. Check out the \"Enhancing with Microformats\" section for an explanation and examples.</p>\n\n\n  \n    <p>If you liked this article and think others should read it, please\n      \n      <a href=\"https://twitter.com/intent/tweet/?text=Add%20Webmentions%20to%20your%20Eleventy%20static%20site%20with%20this%20step-by-step%20tutorial.%20by%20@TheGreenGreek&amp;amp;url=https://sia.codes/posts/webmentions-eleventy-in-depth/\">share it on Twitter</a></p>",
        "html": "<p>I am a huge fan of the static site generator <a href=\"https://www.11ty.io/\">Eleventy</a> so far, and I was super excited to try out <a href=\"https://indieweb.org/Webmention\">Webmentions</a> with them.</p>\n<blockquote>\n<p>Webmention is a web standard for mentions and conversations across the web, a powerful building block that is used for a growing federated network of comments, likes, reposts, and other rich interactions across the decentralized social web.<br />\n—from <a href=\"https://indieweb.org/Webmention\">IndieWeb.org</a></p>\n</blockquote>\n<p>They are a cool tool for enabling social interactions when you host your own content. Max Böck wrote an excellent post, <a href=\"https://mxb.dev/blog/using-webmentions-on-static-sites/\">Static Indieweb pt2: Using Webmentions</a>, which walks through his implementation. He also created an Eleventy starter, <a href=\"https://github.com/maxboeck/eleventy-webmentions\">eleventy-webmentions</a>, which is a basic starter template with webmentions support.</p>\n<p>So why am I writing this post? Sadly, I started with the <a href=\"https://github.com/11ty/eleventy-base-blog\">eleventy-base-blog</a>, and didn't notice the <a href=\"https://github.com/maxboeck/eleventy-webmentions\">eleventy-webmentions</a> starter until after I had already built my site. I also struggled to fully build out the functionality, partly because I'm still an Eleventy n00b. So I wanted to share the detailed steps I used in the hopes that it will help more of you join the Indie Web.</p>\n<p>The perspective of this post is adding webmentions to an Eleventy site after the fact. The files, folders, and config architecture match the <code>eleventy-base-blog</code>, but you can likely use this as a starting point for any Eleventy site. Make sure you watch out for spots where your analogous architecture may be different.</p>\n<p>The code in this post is a mash up of Max Böck's original post and <a href=\"https://github.com/maxboeck/mxb\">personal site</a>, the <a href=\"https://github.com/maxboeck/eleventy-webmentions\">eleventy-webmentions</a> starter, Zach Leatherman's <a href=\"https://github.com/zachleat/zachleat.com\">personal site</a>, and the edits I made during my implementation. I am hugely grateful for their work, as I never would have gotten this far without it.</p>\n<h2>Step 1: Sign up for webmentions <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#step-1%3A-sign-up-for-webmentions\">#</a>\n</h2>\n<p>First, we need to sign up with <a href=\"http://webmention.io\">webmention.io</a>, the third-party service that lets us use the power of webmentions on static sites.</p>\n<ol><li>Set up IndieAuth so that webmention will know that you control your domain. Follow the setup instructions <a href=\"https://indieauth.com/setup\">on their site</a>.</li>\n<li>Go to <a href=\"https://webmention.io/\">webmention.io/</a>.</li>\n<li>Enter your website's URL in the \"Web Sign-In\" input, and click \"Sign in\".</li>\n</ol><p>If your sign in was successful, you should be directed to the webmentions dashboard where you will be given two <code>&lt;link&gt;</code> tags. You should put these in the <code>&lt;head&gt;</code> of your website:</p>\n<pre><code><span><span>&lt;!-- _includes/layouts/base.njk --&gt;</span></span><br /><span><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>webmention<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://webmention.io/sia.codes/webmention<span>\"</span></span> <span>/&gt;</span></span></span><br /><span><span><span><span>&lt;</span>link</span> <span>rel</span><span><span>=</span><span>\"</span>pingback<span>\"</span></span> <span>href</span><span><span>=</span><span>\"</span>https://webmention.io/sia.codes/xmlrpc<span>\"</span></span> <span>/&gt;</span></span></span></code></pre>\n<p>You'll also be given an API key. We want to safely store that in our local environment variables. Add <code>dotenv</code> for easily getting and setting env variables:</p>\n<pre><code><span>$ <span>npm</span> <span>install</span> dotenv</span></code></pre>\n<p>Create a <code>.env</code> file in the root of your project, and add your <a href=\"http://Webmention.io\">Webmention.io</a> API key</p>\n<pre><code><span><span>WEBMENTION_IO_TOKEN</span><span>=</span>y0urKeyHeRe</span></code></pre>\n<p>Don't forget to add it to your <code>.gitignore</code> file. While we are here, let's add the <code>_cache/</code> folder which will be created when we first fetch webmentions:</p>\n<pre><code><span>_cache/</span><br /><span>_site/</span><br /><span>node_modules/</span><br /><span>.env</span></code></pre>\n<p>You probably want some content in your webmentions. If you use Twitter, <a href=\"https://brid.gy/\">Bridgy</a> is a great way to bring in mentions from Twitter. First make sure your website is listed in your profile, then link it.</p>\n<h2>How it's all going to work <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#how-it's-all-going-to-work\">#</a>\n</h2>\n<p>When we run a build with <code>NODE_ENV=production</code>, we are going to fetch new webmentions from the last time we fetched. These will be saved in <code>_cache/webmentions.json</code>. These mentions come from the <a href=\"https://github.com/aaronpk/webmention.io#api\">webmention.io API</a>.</p>\n<p>When we do any build, for each page:</p>\n<ul><li>From the webmentions cache in <code>_cache/webmentions.json</code>, only keep webmentions that match the URL of the page (for me, this is each blog post).</li>\n<li>Use a <code>webmentionsByType</code> function to filter for one type (e.g., likes or replies)</li>\n<li>Use a <code>size</code> function to calculate the count of those mentions by type</li>\n<li>Render the count with mention type as a heading (e.g., \"7 Replies\")</li>\n<li>Render a list of the mentions of that type (e.g., linked Twitter profile pictures representing each like)</li>\n</ul><h2>Fetching webmentions <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#fetching-webmentions\">#</a>\n</h2>\n<p>First, we need to set up our domain as another property in our <code>_data/metadata.json</code>. Let's also add our root URL for use later:</p>\n<pre><code><span><span>// _data/metadata.json</span></span><br /><span><span>{</span></span><br /><span>  <span>//...other metadata</span></span><br /><span>  <span>\"domain\"</span><span>:</span> <span>\"sia.codes\"</span><span>,</span></span><br /><span>  <span>\"url\"</span><span>:</span> <span>\"https://sia.codes\"</span></span><br /><span><span>}</span></span></code></pre>\n<p>Next, we'll add a few more dependencies:</p>\n<pre><code><span>$ <span>npm</span> <span>install</span> lodash node-fetch</span></code></pre>\n<p>And update our <code>build</code> script to set the <code>NODE_ENV</code> in our <code>package.json</code>:</p>\n<pre><code><span><span>// package.json</span></span><br /><span><span>{</span></span><br /><span>  <span>// ... more config</span></span><br /><span>  <span>\"scripts\"</span><span>:</span> <span>{</span></span><br /><span>    <span>\"build\"</span><span>:</span> <span>\"NODE_ENV=production npx eleventy\"</span><span>,</span></span><br /><span>    <span>// more scripts...</span></span><br /><span><span>}</span></span></code></pre>\n<p>Now we can focus on the fetch code. Okay, okay, I know this next file is beaucoup long, but I thought it was more difficult to understand out of context. Here are the general steps happening in the code:</p>\n<ol><li>Read any mentions from the file cache at <code>_cache/webmentions.json</code>.</li>\n<li>If our environment is \"production\", fetch new webmentions since the last time we fetched. Merge them with the cached ones and save to the cache file. Return the merged set of mentions.</li>\n<li>If our envinroment is not \"production\", return the cached mentions from the file</li>\n</ol><pre><code><span><span>// _data/webmentions.js</span></span><br /><span><span>const</span> fs <span>=</span> <span>require</span><span>(</span><span>'fs'</span><span>)</span></span><br /><span><span>const</span> fetch <span>=</span> <span>require</span><span>(</span><span>'node-fetch'</span><span>)</span></span><br /><span><span>const</span> unionBy <span>=</span> <span>require</span><span>(</span><span>'lodash/unionBy'</span><span>)</span></span><br /><span><span>const</span> domain <span>=</span> <span>require</span><span>(</span><span>'./metadata.json'</span><span>)</span><span>.</span>domain</span><br /><span></span><br /><span><span>// Load .env variables with dotenv</span></span><br /><span><span>require</span><span>(</span><span>'dotenv'</span><span>)</span><span>.</span><span>config</span><span>(</span><span>)</span></span><br /><span></span><br /><span><span>// Define Cache Location and API Endpoint</span></span><br /><span><span>const</span> <span>CACHE_FILE_PATH</span> <span>=</span> <span>'_cache/webmentions.json'</span></span><br /><span><span>const</span> <span>API</span> <span>=</span> <span>'https://webmention.io/api'</span></span><br /><span><span>const</span> <span>TOKEN</span> <span>=</span> process<span>.</span>env<span>.</span><span>WEBMENTION_IO_TOKEN</span></span><br /><span></span><br /><span><span>async</span> <span>function</span> <span>fetchWebmentions</span><span>(</span><span>since<span>,</span> perPage <span>=</span> <span>10000</span></span><span>)</span> <span>{</span></span><br /><span>  <span>// If we dont have a domain name or token, abort</span></span><br /><span>  <span>if</span> <span>(</span><span>!</span>domain <span>||</span> <span>!</span><span>TOKEN</span><span>)</span> <span>{</span></span><br /><span>    console<span>.</span><span>warn</span><span>(</span><span>'&gt;&gt;&gt; unable to fetch webmentions: missing domain or token'</span><span>)</span></span><br /><span>    <span>return</span> <span>false</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>let</span> url <span>=</span> <span><span>`</span><span><span>${</span><span>API</span><span>}</span></span><span>/mentions.jf2?domain=</span><span><span>${</span>domain<span>}</span></span><span>&amp;token=</span><span><span>${</span><span>TOKEN</span><span>}</span></span><span>&amp;per-page=</span><span><span>${</span>perPage<span>}</span></span><span>`</span></span></span><br /><span>  <span>if</span> <span>(</span>since<span>)</span> url <span>+=</span> <span><span>`</span><span>&amp;since=</span><span><span>${</span>since<span>}</span></span><span>`</span></span> <span>// only fetch new mentions</span></span><br /><span></span><br /><span>  <span>const</span> response <span>=</span> <span>await</span> <span>fetch</span><span>(</span>url<span>)</span></span><br /><span>  <span>if</span> <span>(</span>response<span>.</span>ok<span>)</span> <span>{</span></span><br /><span>    <span>const</span> feed <span>=</span> <span>await</span> response<span>.</span><span>json</span><span>(</span><span>)</span></span><br /><span>    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>&gt;&gt;&gt; </span><span><span>${</span>feed<span>.</span>children<span>.</span>length<span>}</span></span><span> new webmentions fetched from </span><span><span>${</span><span>API</span><span>}</span></span><span>`</span></span><span>)</span></span><br /><span>    <span>return</span> feed</span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>return</span> <span>null</span></span><br /><span><span>}</span></span><br /><span></span><br /><span><span>// Merge fresh webmentions with cached entries, unique per id</span></span><br /><span><span>function</span> <span>mergeWebmentions</span><span>(</span><span>a<span>,</span> b</span><span>)</span> <span>{</span></span><br /><span>  <span>return</span> <span>unionBy</span><span>(</span>a<span>.</span>children<span>,</span> b<span>.</span>children<span>,</span> <span>'wm-id'</span><span>)</span></span><br /><span><span>}</span></span><br /><span></span><br /><span><span>// save combined webmentions in cache file</span></span><br /><span><span>function</span> <span>writeToCache</span><span>(</span><span>data</span><span>)</span> <span>{</span></span><br /><span>  <span>const</span> dir <span>=</span> <span>'_cache'</span></span><br /><span>  <span>const</span> fileContent <span>=</span> <span>JSON</span><span>.</span><span>stringify</span><span>(</span>data<span>,</span> <span>null</span><span>,</span> <span>2</span><span>)</span></span><br /><span>  <span>// create cache folder if it doesnt exist already</span></span><br /><span>  <span>if</span> <span>(</span><span>!</span>fs<span>.</span><span>existsSync</span><span>(</span>dir<span>)</span><span>)</span> <span>{</span></span><br /><span>    fs<span>.</span><span>mkdirSync</span><span>(</span>dir<span>)</span></span><br /><span>  <span>}</span></span><br /><span>  <span>// write data to cache json file</span></span><br /><span>  fs<span>.</span><span>writeFile</span><span>(</span><span>CACHE_FILE_PATH</span><span>,</span> fileContent<span>,</span> <span>err</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>if</span> <span>(</span>err<span>)</span> <span>throw</span> err</span><br /><span>    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>&gt;&gt;&gt; webmentions cached to </span><span><span>${</span><span>CACHE_FILE_PATH</span><span>}</span></span><span>`</span></span><span>)</span></span><br /><span>  <span>}</span><span>)</span></span><br /><span><span>}</span></span><br /><span></span><br /><span><span>// get cache contents from json file</span></span><br /><span><span>function</span> <span>readFromCache</span><span>(</span><span>)</span> <span>{</span></span><br /><span>  <span>if</span> <span>(</span>fs<span>.</span><span>existsSync</span><span>(</span><span>CACHE_FILE_PATH</span><span>)</span><span>)</span> <span>{</span></span><br /><span>    <span>const</span> cacheFile <span>=</span> fs<span>.</span><span>readFileSync</span><span>(</span><span>CACHE_FILE_PATH</span><span>)</span></span><br /><span>    <span>return</span> <span>JSON</span><span>.</span><span>parse</span><span>(</span>cacheFile<span>)</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>// no cache found.</span></span><br /><span>  <span>return</span> <span>{</span></span><br /><span>    lastFetched<span>:</span> <span>null</span><span>,</span></span><br /><span>    children<span>:</span> <span>[</span><span>]</span></span><br /><span>  <span>}</span></span><br /><span><span>}</span></span><br /><span></span><br /><span>module<span>.</span><span>exports</span> <span>=</span> <span>async</span> <span>function</span> <span>(</span><span>)</span> <span>{</span></span><br /><span>  console<span>.</span><span>log</span><span>(</span><span>'&gt;&gt;&gt; Reading webmentions from cache...'</span><span>)</span><span>;</span></span><br /><span></span><br /><span>  <span>const</span> cache <span>=</span> <span>readFromCache</span><span>(</span><span>)</span></span><br /><span></span><br /><span>  <span>if</span> <span>(</span>cache<span>.</span>children<span>.</span>length<span>)</span> <span>{</span></span><br /><span>    console<span>.</span><span>log</span><span>(</span><span><span>`</span><span>&gt;&gt;&gt; </span><span><span>${</span>cache<span>.</span>children<span>.</span>length<span>}</span></span><span> webmentions loaded from cache</span><span>`</span></span><span>)</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>// Only fetch new mentions in production</span></span><br /><span>  <span>if</span> <span>(</span>process<span>.</span>env<span>.</span><span>NODE_ENV</span> <span>===</span> <span>'production'</span><span>)</span> <span>{</span></span><br /><span>    console<span>.</span><span>log</span><span>(</span><span>'&gt;&gt;&gt; Checking for new webmentions...'</span><span>)</span><span>;</span></span><br /><span>    <span>const</span> feed <span>=</span> <span>await</span> <span>fetchWebmentions</span><span>(</span>cache<span>.</span>lastFetched<span>)</span></span><br /><span>    <span>if</span> <span>(</span>feed<span>)</span> <span>{</span></span><br /><span>      <span>const</span> webmentions <span>=</span> <span>{</span></span><br /><span>        lastFetched<span>:</span> <span>new</span> <span>Date</span><span>(</span><span>)</span><span>.</span><span>toISOString</span><span>(</span><span>)</span><span>,</span></span><br /><span>        children<span>:</span> <span>mergeWebmentions</span><span>(</span>cache<span>,</span> feed<span>)</span></span><br /><span>      <span>}</span></span><br /><span></span><br /><span>      <span>writeToCache</span><span>(</span>webmentions<span>)</span></span><br /><span>      <span>return</span> webmentions</span><br /><span>    <span>}</span></span><br /><span>  <span>}</span></span><br /><span></span><br /><span>  <span>return</span> cache</span><br /><span><span>}</span></span></code></pre>\n<h2>Filters for build <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#filters-for-build\">#</a>\n</h2>\n<p>Now that we've populated our webmentions cache, we need to use it. First we have to generate the functions, or \"filters\" that Eleventy will use to build our templates.</p>\n<p>First, I like keeping some filters separated from the main Eleventy config so that it doesn't get too bogged down. The separate filters file will define each of our filters in an object. The keys are the filter names and the values are the filter functions. In <code>_11ty/filters.js</code>, add each of our new filter functions:</p>\n<pre><code><span><span>// _11ty/filters.js</span></span><br /><span><span>const</span> <span>{</span> DateTime <span>}</span> <span>=</span> <span>require</span><span>(</span><span>\"luxon\"</span><span>)</span><span>;</span> <span>// Already in eleventy-base-blog</span></span><br /><span></span><br /><span>module<span>.</span>exports <span>=</span> <span>{</span></span><br /><span>  <span>getWebmentionsForUrl</span><span>:</span> <span>(</span><span>webmentions<span>,</span> url</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> webmentions<span>.</span>children<span>.</span><span>filter</span><span>(</span><span>entry</span> <span>=&gt;</span> entry<span>[</span><span>'wm-target'</span><span>]</span> <span>===</span> url<span>)</span></span><br /><span>  <span>}</span><span>,</span></span><br /><span>  <span>size</span><span>:</span> <span>(</span><span>mentions</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> <span>!</span>mentions <span>?</span> <span>0</span> <span>:</span> mentions<span>.</span>length</span><br /><span>  <span>}</span><span>,</span></span><br /><span>  <span>webmentionsByType</span><span>:</span> <span>(</span><span>mentions<span>,</span> mentionType</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> mentions<span>.</span><span>filter</span><span>(</span><span>entry</span> <span>=&gt;</span> <span>!</span><span>!</span>entry<span>[</span>mentionType<span>]</span><span>)</span></span><br /><span>  <span>}</span><span>,</span></span><br /><span>  readableDateFromISO<span>:</span> <span>(</span>dateStr<span>,</span> formatStr <span>=</span> <span>\"dd LLL yyyy 'at' hh:mma\"</span><span>)</span> <span>=&gt;</span> <span>{</span></span><br /><span>    <span>return</span> DateTime<span>.</span><span>fromISO</span><span>(</span>dateStr<span>)</span><span>.</span><span>toFormat</span><span>(</span>formatStr<span>)</span><span>;</span></span><br /><span>  <span>}</span></span><br /><span><span>}</span></span></code></pre>\n<p>Now to use these new filters, in our <code>.eleventy.js</code>, we need to loop through the keys of that filters object to add each filter to our Eleventy config:</p>\n<pre><code><span><span>// .eleventy.js</span></span><br /><span><span>// ...Other imports</span></span><br /><span><span>const</span> filters <span>=</span> <span>require</span><span>(</span><span>'./_11ty/filters'</span><span>)</span></span><br /><span></span><br /><span>module<span>.</span><span>exports</span> <span>=</span> <span>function</span><span>(</span><span>eleventyConfig</span><span>)</span> <span>{</span></span><br /><span>  <span>// Filters</span></span><br /><span>  Object<span>.</span><span>keys</span><span>(</span>filters<span>)</span><span>.</span><span>forEach</span><span>(</span><span>filterName</span> <span>=&gt;</span> <span>{</span></span><br /><span>    eleventyConfig<span>.</span><span>addFilter</span><span>(</span>filterName<span>,</span> filters<span>[</span>filterName<span>]</span><span>)</span></span><br /><span>  <span>}</span><span>)</span></span><br /><span></span><br /><span>  <span>// Other configs...</span></span></code></pre>\n<p>I do not have a sanitize HTML filter because I noticed the content data has a <code>text</code> field that is already sanitized. Maybe this is new or not true for all webmentions. I'll update this post if I add it in.</p>\n<h2>Rendering mentions <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#rendering-mentions\">#</a>\n</h2>\n<p>Now we're ready to put it all together and render our webmentions. I put them at the bottom of each blog post, so in my <code>_includes/layouts/post.njk</code>, I add a new section for the webmentions. Here, we are setting a variable called <code>webmentionUrl</code> to the page's full URL, and passing it into the partial for the <code>webmentions.njk</code> template:</p>\n<pre><code><span><span>&lt;!-- _includes/layouts/post.njk --&gt;</span></span><br /><span><span><span><span>&lt;</span>section</span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>h2</span><span>&gt;</span></span>Webmentions<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span></span><br /><span>  {% set webmentionUrl %}{{ page.url | url | absoluteUrl(site.url) }}{% endset %}</span><br /><span>  {% include 'webmentions.njk' %}</span><br /><span><span><span><span>&lt;/</span>section</span><span>&gt;</span></span></span></code></pre>\n<p>Now we can write the webmentions template. In this example, I will show links, retweets, and replies. First, I set all of the variables I will need for rendering in a bit:</p>\n<pre><code><span><span>&lt;!-- _includes/webmentions.njk --&gt;</span></span><br /><span>  <span>&lt;!-- Filter the cached mentions to only include ones matching the post's url --&gt;</span></span><br /><span>  {% set mentions = webmentions | getWebmentionsForUrl(metadata.url + webmentionUrl) %}</span><br /><span>  <span>&lt;!-- Set reposts as mentions that are `repost-of`  --&gt;</span></span><br /><span>  {% set reposts = mentions | webmentionsByType('repost-of') %}</span><br /><span>  <span>&lt;!-- Count the total reposts --&gt;</span></span><br /><span>  {% set repostsSize = reposts | size %}</span><br /><span>  <span>&lt;!-- Set likes as mentions that are `like-of`  --&gt;</span></span><br /><span>  {% set likes = mentions | webmentionsByType('like-of') %}</span><br /><span>  <span>&lt;!-- Count the total likes --&gt;</span></span><br /><span>  {% set likesSize = likes | size %}</span><br /><span>  <span>&lt;!-- Set replies as mentions that are `in-reply-to`  --&gt;</span></span><br /><span>  {% set replies = mentions | webmentionsByType('in-reply-to')  %}</span><br /><span>  <span>&lt;!-- Count the total replies --&gt;</span></span><br /><span>  {% set repliesSize = replies | size  %}</span></code></pre>\n<p>With our variables set, we can now use that data for rendering. Here I'll walk through only \"replies\", but feel free to see how I handled the remaining sets in <a href=\"https://gist.github.com/siakaramalegos/b1f7ded21f9ecddaee91e3f6d88e2e48\">this gist</a>.</p>\n<p>Since replies are more complex than just rendering a photo and link, I call another template to render the individual webmention. Here we render the count of replies and conditionally plural-ify the word \"Reply\". Then we loop through the reply webmentions to render them with a new nunjucks partial:</p>\n<pre><code><span><span>&lt;!-- _includes/webmentions.njk --&gt;</span></span><br /><span><span>&lt;!-- ...setting variables and other markup --&gt;</span></span><br /><span>{% if repliesSize &gt; 0 %}</span><br /><span><span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>webmention-replies<span>\"</span></span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>h3</span><span>&gt;</span></span>{{ repliesSize }} {% if repliesSize == \"1\" %}Reply{% else %}Replies{% endif %}<span><span><span>&lt;/</span>h3</span><span>&gt;</span></span></span><br /><span></span><br /><span>  {% for webmention in replies %}</span><br /><span>    {% include 'webmention.njk' %}</span><br /><span>  {% endfor %}</span><br /><span><span><span><span>&lt;/</span>div</span><span>&gt;</span></span></span><br /><span>{% endif %}</span></code></pre>\n<p>Finally, we can render our replies using that new partial for a single reply webmention. Here, if the author has a photo, we show it, otherwise we show an avatar. We also conditionally show their name if it exists, otherwise we show \"Anonymous\". We use our <code>readableDateFromISO</code> filter to show a human-friendly published date, and finally render the text of the webmention:</p>\n<pre><code><span><span>&lt;!-- _includes/webmention.njk --&gt;</span></span><br /><span><span><span><span>&lt;</span>article</span> <span>class</span><span><span>=</span><span>\"</span>webmention<span>\"</span></span> <span>id</span><span><span>=</span><span>\"</span>webmention-{{ webmention['wm-id'] }}<span>\"</span></span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>div</span> <span>class</span><span><span>=</span><span>\"</span>webmention__meta<span>\"</span></span><span>&gt;</span></span></span><br /><span>    {% if webmention.author %}</span><br /><span>      {% if webmention.author.photo %}</span><br /><span>      <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>{{ webmention.author.photo }}<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span>{{ webmention.author.name }}<span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>48<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>48<span>\"</span></span> <span>loading</span><span><span>=</span><span>\"</span>lazy<span>\"</span></span><span>&gt;</span></span></span><br /><span>      {% else %}</span><br /><span>      <span><span><span>&lt;</span>img</span> <span>src</span><span><span>=</span><span>\"</span>{{ '/img/avatar.svg' | url }}<span>\"</span></span> <span>alt</span><span><span>=</span><span>\"</span><span>\"</span></span> <span>width</span><span><span>=</span><span>\"</span>48<span>\"</span></span> <span>height</span><span><span>=</span><span>\"</span>48<span>\"</span></span><span>&gt;</span></span></span><br /><span>      {% endif %}</span><br /><span>      <span><span><span>&lt;</span>span</span><span>&gt;</span></span></span><br /><span>        <span><span><span>&lt;</span>a</span> <span>class</span><span><span>=</span><span>\"</span>h-card u-url<span>\"</span></span> <span>{%</span> <span>if</span> <span>webmention.url</span> <span>%}href</span><span><span>=</span><span>\"</span>{{ webmention.url }}<span>\"</span></span> <span>{%</span> <span>endif</span> <span>%}</span> <span>target</span><span><span>=</span><span>\"</span>_blank<span>\"</span></span> <span>rel</span><span><span>=</span><span>\"</span>noopener noreferrer<span>\"</span></span><span>&gt;</span></span><span><span><span>&lt;</span>strong</span> <span>class</span><span><span>=</span><span>\"</span>p-name<span>\"</span></span><span>&gt;</span></span>{{ webmention.author.name }}<span><span><span>&lt;/</span>strong</span><span>&gt;</span></span><span><span><span>&lt;/</span>a</span><span>&gt;</span></span></span><br /><span>      <span><span><span>&lt;/</span>span</span><span>&gt;</span></span></span><br /><span>    {% else %}</span><br /><span>      <span><span><span>&lt;</span>span</span><span>&gt;</span></span></span><br /><span>        <span><span><span>&lt;</span>strong</span><span>&gt;</span></span>Anonymous<span><span><span>&lt;/</span>strong</span><span>&gt;</span></span></span><br /><span>      <span><span><span>&lt;/</span>span</span><span>&gt;</span></span></span><br /><span>    {% endif %}</span><br /><span></span><br /><span>    {% if webmention.published %}</span><br /><span>        <span><span><span>&lt;</span>time</span> <span>class</span><span><span>=</span><span>\"</span>postlist-date<span>\"</span></span> <span>datetime</span><span><span>=</span><span>\"</span>{{ webmention.published }}<span>\"</span></span><span>&gt;</span></span></span><br /><span>            {{ webmention.published | readableDateFromISO }}</span><br /><span>        <span><span><span>&lt;/</span>time</span><span>&gt;</span></span></span><br /><span>    {% endif %}</span><br /><span>  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span></span><br /><span>  <span><span><span>&lt;</span>div</span><span>&gt;</span></span></span><br /><span>      {{ webmention.content.text }}</span><br /><span>  <span><span><span>&lt;/</span>div</span><span>&gt;</span></span></span><br /><span><span><span><span>&lt;/</span>article</span><span>&gt;</span></span></span></code></pre>\n<h2>Geronimo <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#geronimo\">#</a>\n</h2>\n<p>Does it work?!?! We can finally test it out. First run <code>npm run build</code> to generate an initial list of webmentions that is saved to the <code>_cache/webmentions.json</code> file. Then run your local development server and see if it worked! Of course, you'll need to have at least one webmention associated with a post to see anything. 😁</p>\n<p>You can see the result of my own implementation below. Good luck! Let me know how it turns out or if you find in bugs or errors in this post!</p>\n<h2>Continue your journey by using Microformats <a href=\"https://sia.codes/posts/webmentions-eleventy-in-depth/#continue-your-journey-by-using-microformats\">#</a>\n</h2>\n<p>Keith Grant has a great write-up in his article <a href=\"https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/\">Adding Webmention Support to a Static Site</a>. Check out the \"Enhancing with Microformats\" section for an explanation and examples.</p>\n\n\n  \n    <p>If you liked this article and think others should read it, please\n      \n      <a href=\"https://twitter.com/intent/tweet/?text=Add%20Webmentions%20to%20your%20Eleventy%20static%20site%20with%20this%20step-by-step%20tutorial.%20by%20@TheGreenGreek&amp;amp;url=https://sia.codes/posts/webmentions-eleventy-in-depth/\">share it on Twitter</a></p>",
        "text": "I am a huge fan of the static site generator Eleventy so far, and I was super excited to try out Webmentions with them.\n\nWebmention is a web standard for mentions and conversations across the web, a powerful building block that is used for a growing federated network of comments, likes, reposts, and other rich interactions across the decentralized social web.\n\n—from IndieWeb.org\n\nThey are a cool tool for enabling social interactions when you host your own content. Max Böck wrote an excellent post, Static Indieweb pt2: Using Webmentions, which walks through his implementation. He also created an Eleventy starter, eleventy-webmentions, which is a basic starter template with webmentions support.\nSo why am I writing this post? Sadly, I started with the eleventy-base-blog, and didn't notice the eleventy-webmentions starter until after I had already built my site. I also struggled to fully build out the functionality, partly because I'm still an Eleventy n00b. So I wanted to share the detailed steps I used in the hopes that it will help more of you join the Indie Web.\nThe perspective of this post is adding webmentions to an Eleventy site after the fact. The files, folders, and config architecture match the eleventy-base-blog, but you can likely use this as a starting point for any Eleventy site. Make sure you watch out for spots where your analogous architecture may be different.\nThe code in this post is a mash up of Max Böck's original post and personal site, the eleventy-webmentions starter, Zach Leatherman's personal site, and the edits I made during my implementation. I am hugely grateful for their work, as I never would have gotten this far without it.\nStep 1: Sign up for webmentions #\n\nFirst, we need to sign up with webmention.io, the third-party service that lets us use the power of webmentions on static sites.\nSet up IndieAuth so that webmention will know that you control your domain. Follow the setup instructions on their site.\nGo to webmention.io/.\nEnter your website's URL in the \"Web Sign-In\" input, and click \"Sign in\".\nIf your sign in was successful, you should be directed to the webmentions dashboard where you will be given two <link> tags. You should put these in the <head> of your website:\n<!-- _includes/layouts/base.njk -->\n<link rel=\"webmention\" href=\"https://webmention.io/sia.codes/webmention\" />\n<link rel=\"pingback\" href=\"https://webmention.io/sia.codes/xmlrpc\" />\nYou'll also be given an API key. We want to safely store that in our local environment variables. Add dotenv for easily getting and setting env variables:\n$ npm install dotenv\nCreate a .env file in the root of your project, and add your Webmention.io API key\nWEBMENTION_IO_TOKEN=y0urKeyHeRe\nDon't forget to add it to your .gitignore file. While we are here, let's add the _cache/ folder which will be created when we first fetch webmentions:\n_cache/\n_site/\nnode_modules/\n.env\nYou probably want some content in your webmentions. If you use Twitter, Bridgy is a great way to bring in mentions from Twitter. First make sure your website is listed in your profile, then link it.\nHow it's all going to work #\n\nWhen we run a build with NODE_ENV=production, we are going to fetch new webmentions from the last time we fetched. These will be saved in _cache/webmentions.json. These mentions come from the webmention.io API.\nWhen we do any build, for each page:\nFrom the webmentions cache in _cache/webmentions.json, only keep webmentions that match the URL of the page (for me, this is each blog post).\nUse a webmentionsByType function to filter for one type (e.g., likes or replies)\nUse a size function to calculate the count of those mentions by type\nRender the count with mention type as a heading (e.g., \"7 Replies\")\nRender a list of the mentions of that type (e.g., linked Twitter profile pictures representing each like)\nFetching webmentions #\n\nFirst, we need to set up our domain as another property in our _data/metadata.json. Let's also add our root URL for use later:\n// _data/metadata.json\n{\n  //...other metadata\n  \"domain\": \"sia.codes\",\n  \"url\": \"https://sia.codes\"\n}\nNext, we'll add a few more dependencies:\n$ npm install lodash node-fetch\nAnd update our build script to set the NODE_ENV in our package.json:\n// package.json\n{\n  // ... more config\n  \"scripts\": {\n    \"build\": \"NODE_ENV=production npx eleventy\",\n    // more scripts...\n}\nNow we can focus on the fetch code. Okay, okay, I know this next file is beaucoup long, but I thought it was more difficult to understand out of context. Here are the general steps happening in the code:\nRead any mentions from the file cache at _cache/webmentions.json.\nIf our environment is \"production\", fetch new webmentions since the last time we fetched. Merge them with the cached ones and save to the cache file. Return the merged set of mentions.\nIf our envinroment is not \"production\", return the cached mentions from the file\n// _data/webmentions.js\nconst fs = require('fs')\nconst fetch = require('node-fetch')\nconst unionBy = require('lodash/unionBy')\nconst domain = require('./metadata.json').domain\n\n// Load .env variables with dotenv\nrequire('dotenv').config()\n\n// Define Cache Location and API Endpoint\nconst CACHE_FILE_PATH = '_cache/webmentions.json'\nconst API = 'https://webmention.io/api'\nconst TOKEN = process.env.WEBMENTION_IO_TOKEN\n\nasync function fetchWebmentions(since, perPage = 10000) {\n  // If we dont have a domain name or token, abort\n  if (!domain || !TOKEN) {\n    console.warn('>>> unable to fetch webmentions: missing domain or token')\n    return false\n  }\n\n  let url = `${API}/mentions.jf2?domain=${domain}&token=${TOKEN}&per-page=${perPage}`\n  if (since) url += `&since=${since}` // only fetch new mentions\n\n  const response = await fetch(url)\n  if (response.ok) {\n    const feed = await response.json()\n    console.log(`>>> ${feed.children.length} new webmentions fetched from ${API}`)\n    return feed\n  }\n\n  return null\n}\n\n// Merge fresh webmentions with cached entries, unique per id\nfunction mergeWebmentions(a, b) {\n  return unionBy(a.children, b.children, 'wm-id')\n}\n\n// save combined webmentions in cache file\nfunction writeToCache(data) {\n  const dir = '_cache'\n  const fileContent = JSON.stringify(data, null, 2)\n  // create cache folder if it doesnt exist already\n  if (!fs.existsSync(dir)) {\n    fs.mkdirSync(dir)\n  }\n  // write data to cache json file\n  fs.writeFile(CACHE_FILE_PATH, fileContent, err => {\n    if (err) throw err\n    console.log(`>>> webmentions cached to ${CACHE_FILE_PATH}`)\n  })\n}\n\n// get cache contents from json file\nfunction readFromCache() {\n  if (fs.existsSync(CACHE_FILE_PATH)) {\n    const cacheFile = fs.readFileSync(CACHE_FILE_PATH)\n    return JSON.parse(cacheFile)\n  }\n\n  // no cache found.\n  return {\n    lastFetched: null,\n    children: []\n  }\n}\n\nmodule.exports = async function () {\n  console.log('>>> Reading webmentions from cache...');\n\n  const cache = readFromCache()\n\n  if (cache.children.length) {\n    console.log(`>>> ${cache.children.length} webmentions loaded from cache`)\n  }\n\n  // Only fetch new mentions in production\n  if (process.env.NODE_ENV === 'production') {\n    console.log('>>> Checking for new webmentions...');\n    const feed = await fetchWebmentions(cache.lastFetched)\n    if (feed) {\n      const webmentions = {\n        lastFetched: new Date().toISOString(),\n        children: mergeWebmentions(cache, feed)\n      }\n\n      writeToCache(webmentions)\n      return webmentions\n    }\n  }\n\n  return cache\n}\nFilters for build #\n\nNow that we've populated our webmentions cache, we need to use it. First we have to generate the functions, or \"filters\" that Eleventy will use to build our templates.\nFirst, I like keeping some filters separated from the main Eleventy config so that it doesn't get too bogged down. The separate filters file will define each of our filters in an object. The keys are the filter names and the values are the filter functions. In _11ty/filters.js, add each of our new filter functions:\n// _11ty/filters.js\nconst { DateTime } = require(\"luxon\"); // Already in eleventy-base-blog\n\nmodule.exports = {\n  getWebmentionsForUrl: (webmentions, url) => {\n    return webmentions.children.filter(entry => entry['wm-target'] === url)\n  },\n  size: (mentions) => {\n    return !mentions ? 0 : mentions.length\n  },\n  webmentionsByType: (mentions, mentionType) => {\n    return mentions.filter(entry => !!entry[mentionType])\n  },\n  readableDateFromISO: (dateStr, formatStr = \"dd LLL yyyy 'at' hh:mma\") => {\n    return DateTime.fromISO(dateStr).toFormat(formatStr);\n  }\n}\nNow to use these new filters, in our .eleventy.js, we need to loop through the keys of that filters object to add each filter to our Eleventy config:\n// .eleventy.js\n// ...Other imports\nconst filters = require('./_11ty/filters')\n\nmodule.exports = function(eleventyConfig) {\n  // Filters\n  Object.keys(filters).forEach(filterName => {\n    eleventyConfig.addFilter(filterName, filters[filterName])\n  })\n\n  // Other configs...\nI do not have a sanitize HTML filter because I noticed the content data has a text field that is already sanitized. Maybe this is new or not true for all webmentions. I'll update this post if I add it in.\nRendering mentions #\n\nNow we're ready to put it all together and render our webmentions. I put them at the bottom of each blog post, so in my _includes/layouts/post.njk, I add a new section for the webmentions. Here, we are setting a variable called webmentionUrl to the page's full URL, and passing it into the partial for the webmentions.njk template:\n<!-- _includes/layouts/post.njk -->\n<section>\n  <h2>Webmentions</h3>\n  {% set webmentionUrl %}{{ page.url | url | absoluteUrl(site.url) }}{% endset %}\n  {% include 'webmentions.njk' %}\n</section>\nNow we can write the webmentions template. In this example, I will show links, retweets, and replies. First, I set all of the variables I will need for rendering in a bit:\n<!-- _includes/webmentions.njk -->\n  <!-- Filter the cached mentions to only include ones matching the post's url -->\n  {% set mentions = webmentions | getWebmentionsForUrl(metadata.url + webmentionUrl) %}\n  <!-- Set reposts as mentions that are `repost-of`  -->\n  {% set reposts = mentions | webmentionsByType('repost-of') %}\n  <!-- Count the total reposts -->\n  {% set repostsSize = reposts | size %}\n  <!-- Set likes as mentions that are `like-of`  -->\n  {% set likes = mentions | webmentionsByType('like-of') %}\n  <!-- Count the total likes -->\n  {% set likesSize = likes | size %}\n  <!-- Set replies as mentions that are `in-reply-to`  -->\n  {% set replies = mentions | webmentionsByType('in-reply-to')  %}\n  <!-- Count the total replies -->\n  {% set repliesSize = replies | size  %}\nWith our variables set, we can now use that data for rendering. Here I'll walk through only \"replies\", but feel free to see how I handled the remaining sets in this gist.\nSince replies are more complex than just rendering a photo and link, I call another template to render the individual webmention. Here we render the count of replies and conditionally plural-ify the word \"Reply\". Then we loop through the reply webmentions to render them with a new nunjucks partial:\n<!-- _includes/webmentions.njk -->\n<!-- ...setting variables and other markup -->\n{% if repliesSize > 0 %}\n<div class=\"webmention-replies\">\n  <h3>{{ repliesSize }} {% if repliesSize == \"1\" %}Reply{% else %}Replies{% endif %}</h3>\n\n  {% for webmention in replies %}\n    {% include 'webmention.njk' %}\n  {% endfor %}\n</div>\n{% endif %}\nFinally, we can render our replies using that new partial for a single reply webmention. Here, if the author has a photo, we show it, otherwise we show an avatar. We also conditionally show their name if it exists, otherwise we show \"Anonymous\". We use our readableDateFromISO filter to show a human-friendly published date, and finally render the text of the webmention:\n<!-- _includes/webmention.njk -->\n<article class=\"webmention\" id=\"webmention-{{ webmention['wm-id'] }}\">\n  <div class=\"webmention__meta\">\n    {% if webmention.author %}\n      {% if webmention.author.photo %}\n      <img src=\"{{ webmention.author.photo }}\" alt=\"{{ webmention.author.name }}\" width=\"48\" height=\"48\" loading=\"lazy\">\n      {% else %}\n      <img src=\"{{ '/img/avatar.svg' | url }}\" alt=\"\" width=\"48\" height=\"48\">\n      {% endif %}\n      <span>\n        <a class=\"h-card u-url\" {% if webmention.url %}href=\"{{ webmention.url }}\" {% endif %} target=\"_blank\" rel=\"noopener noreferrer\"><strong class=\"p-name\">{{ webmention.author.name }}</strong></a>\n      </span>\n    {% else %}\n      <span>\n        <strong>Anonymous</strong>\n      </span>\n    {% endif %}\n\n    {% if webmention.published %}\n        <time class=\"postlist-date\" datetime=\"{{ webmention.published }}\">\n            {{ webmention.published | readableDateFromISO }}\n        </time>\n    {% endif %}\n  </div>\n  <div>\n      {{ webmention.content.text }}\n  </div>\n</article>\nGeronimo #\n\nDoes it work?!?! We can finally test it out. First run npm run build to generate an initial list of webmentions that is saved to the _cache/webmentions.json file. Then run your local development server and see if it worked! Of course, you'll need to have at least one webmention associated with a post to see anything. 😁\nYou can see the result of my own implementation below. Good luck! Let me know how it turns out or if you find in bugs or errors in this post!\nContinue your journey by using Microformats #\n\nKeith Grant has a great write-up in his article Adding Webmention Support to a Static Site. Check out the \"Enhancing with Microformats\" section for an explanation and examples.\n\n\n  \n    If you liked this article and think others should read it, please\n      \n      share it on Twitter"
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Evan Travers",
        "photo": "https://webmention.io/avatar/evantravers.com/39f7bd1d67547834d5bbb98dba10760ae97fe501f5542f69e2fbe81aa81b547c.jpg",
        "url": ""
      },
      "url": "http://evantravers.com/articles/2019/11/14/indieweb-webmentions-on-middleman-or-jekyll/",
      "published": "2019-11-14T00:53:00",
      "wm-received": "2019-11-15T00:52:31Z",
      "wm-id": 724428,
      "wm-source": "http://evantravers.com/articles/2019/11/14/indieweb-webmentions-on-middleman-or-jekyll/",
      "wm-target": "http://webmention.io",
      "name": "Indieweb Webmentions on Middleman or Jekyll",
      "content": {
        "content-type": "text/html",
        "value": "<p>Recently, <a href=\"https://twitter.com/ttscoff\">@ttscoff</a> asked a little bit about how\nI’m including twitter replies to a blog post on my site. I like building and\nhacking on stuff on my site… so one of my experiments is “joining the\nindieweb.”</p>\n\n<p>There isn’t a right way to implement this stuff… one of the beautiful and\nbewildering things about the indieweb is how open it is… this is just the way\nthat I have it working for now.</p>\n\n<h2>What is the Indieweb?</h2>\n\n<blockquote>\n<p>When you post something on the web, it should belong to you, not a\ncorporation. Too many companies have gone out of business and lost all of\ntheir users’ data. By joining the IndieWeb, your content stays yours and in\nyour control.</p>\n\n<p>— <a href=\"https://indieweb.org/\">indiweb.org</a></p>\n</blockquote>\n\n<p>I’ve missed the old days of exciting, self-built social networks, web-rings,\nand such, and as with all new tech… I like the idea of owning my own content,\nbut still being connected and part of a network. I like the idea of not being\nbeholden to some social giant to connect me and steal all my data.</p>\n\n<p>At the moment, indieweb development is a really fun, rowdy, neat group of\ndevelopers experimenting and connecting mostly on the indieweb wiki and IRC.\nThere is a slack mirror of the IRC if that’s your jam.</p>\n\n<p>To learn more, check out <a href=\"https://indieweb.org/\">indieweb.org</a> or the <a href=\"https://indieweb.org/Getting_Started\">Getting\nStarted page</a> on the wiki.</p>\n\n<h2>Tech Details</h2>\n\n<p>My blog uses <a href=\"https://middlemanapp.com\">middleman</a> for static-site generation.\nI’m sure this process should also work for Jekyll, or any other <a href=\"http://staticgen.com\">static\nwebsites</a>.</p>\n\n<p>Using a static site means that all you see is sitting as a static file on S3.\nThat means that I don’t have a server to respond to queries and requests or do\nthe “thinking” for my website… so for the moment I’m going to have to lean on\nsome others.</p>\n\n<p>I think that other folks like Keith Grant are using webmentions and micropub to\nmake their blog more responsive as they move around the web… I may look into\nmaking that work for me. Seems like a fun use case for elixir… but that’s\nlater. For now, it’s a ruby build script, and some javascript talking to other\ntools to connect everything. More on that.</p>\n\n<p>While working on getting everything configured correctly, I used several tools\nto debug my setup. Probably the most helpful was\n<a href=\"https://indiewebify.me/\">indiewebify.me</a>. I did experience problems with\nseveral of the tools because I was <a href=\"https://middlemanapp.com/advanced/file-size-optimization/\">compressing files on S3 using\ngzip</a> and it was\ninterfering somehow with the scraper. Once I turned that off everything went a\nlot smoother.</p>\n\n<h2>Identity: setting up your indieweb profile</h2>\n\n<p>When you set up a social network… first you set up your profile. It’s the same\nfor the indieweb!</p>\n\n<h3>webmention.io</h3>\n\n<p>My static site can’t respond to anything… so someone else has to do the\nlistening for me. I’m using <a href=\"http://webmention.io\">http://webmention.io</a> after\nfinding it either in a guide or on the wiki.</p>\n\n<p>I first authenticated my site on <a href=\"http://webmention.io\">webmention.io</a> using a\ntwitter link… it uses another service called indielogin.com to identify people\nby the services they list on their website.</p>\n\n<p>Basically: I can login to twitter. My twitter links to my website and vice\nversa. If I can log into my twitter, I can oauth and identify me as the person\nwho owns my website. Cool!</p>\n\n<p>The install guide on webmention.io walked me through adding the “pingback\nURLs\"… this means that if someone wants to comment on this website, that’s\nwhere they should send their webmention.</p>\n\n<h3>h-card</h3>\n\n<p>I also had provide information about myself on my site. Using\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/microformats\">microformats</a>\non an element classed <code>.h-card</code>, you can describe and specify details. If you\nsend someone a webmention, their service will look at your homepage to find\ninformation about you.</p>\n\n<p>Here’s the current <code>h-card</code> from my home page:</p>\n<pre><code><span>&lt;div</span> <span>class=</span><span>\"h-card  p-author  u-author  hidden\"</span><span>&gt;</span>\n  <span>&lt;img</span> <span>class=</span><span>\"u-photo\"</span> <span>src=</span><span>\"http://evantravers.com/images/avatar.jpg\"</span> <span>alt=</span><span>\"\"</span><span>&gt;</span>\n  <span>&lt;p</span> <span>class=</span><span>\"p-note\"</span><span>&gt;</span>\n    I make tools and tell stories. In love with the grace I have found, and\n    finding myself currently in <span>&lt;span</span> <span>class=</span><span>\"p-locality\"</span><span>&gt;</span>Birmingham, AL<span>&lt;/span&gt;</span>.\n  <span>&lt;/p&gt;</span>\n  <span>&lt;a</span> <span>href=</span><span>\"http://evantravers.com/\"</span> <span>class=</span><span>\"u-url  u-uid  p-name\"</span> <span>rel=</span><span>\"me\"</span><span>&gt;</span>Evan Travers<span>&lt;/a&gt;</span>\n  <span>&lt;a</span> <span>href=</span><span>\"mailto:evantravers@gmail.com\"</span> <span>rel=</span><span>\"me\"</span> <span>class=</span><span>\"u-email\"</span><span>&gt;</span>evantravers@gmail.com<span>&lt;/a&gt;</span>\n<span>&lt;/div&gt;</span>\n</code></pre>\n<p>It’s pretty simple… it’s a structured document with some additional microformat\nmarkup to tell other programs how the fields are classified.</p>\n\n<p>At the moment, it’s invisible from view, which isn’t the best thing to do. The\n<code>h-card</code> on <a href=\"http://adactio.com\">Jeremy Keith’s blog Adactio</a> is a lot\nclassier.</p>\n\n<p><img src=\"http://evantravers.com/images/articles/2019/11/adactio.com_.png\" alt=\"image of the h-card on Adactio.com\" /></p>\n\n<p>You can see the results of my <code>h-card</code> by visiting this <a href=\"http://pin13.net/mf2/?url=http%3A%2F%2Fevantravers.com%2Farticles%2F2019%2F11%2F12%2Fshell-game-trying-out-fish%2F\">microformats\nparser</a>.</p>\n\n<p>There’s a little confusion here… if you read on the <a href=\"http://microformats.org/wiki/h-card#Backward_Compatibility\">microformats\nwiki</a>, you’ll find\nthat there’s another format called <code>vcard</code> that you can add for backwards\ncompatibility. There was also debate as to what fields should be included\nwhere… There’s a lot of change and iteration as people experiment and let\nexperiments die… just part of the indieweb world I guess. The IRC at #indieweb\nor <a href=\"https://chat.indieweb.org/slack\">slack channel</a> is really helpful here.</p>\n\n<h2>Connecting the dots</h2>\n\n<p>Now someone who scrapes my site can see who I am and what accounts on other\nsites I’m associated with… and webmention.io is listening on my behalf for any\nwebmentions that might be sent my way… time to start posting and talking!</p>\n\n<h3>Listening: Twitter Conversations</h3>\n\n<p>For connecting my site to others, I’m using <a href=\"https://brid.gy/\">brid.gy</a>.</p>\n\n<p><img src=\"http://evantravers.com/images/articles/2019/11/bridgy.png\" alt=\"screenshot of brid.gy's home page\" /></p>\n\n<blockquote>\n<p>Bridgy connects your web site to social media. Likes, retweets, mentions,\ncross-posting, and more…</p>\n</blockquote>\n\n<p>I hooked up my twitter to bridgy, so it’s trolling my twitter periodically and\nsending webmentions for me! The result of this is if I post a tweet containing\na link to a page on my website, brid.gy is listening and sends a webmention\nback to my URL. This even works for replies, likes, and retweets… you can\ninteract with my content on other services, and it all comes back to my\npersonal site.</p>\n\n<p>The indieweb calls this <a href=\"https://indieweb.org/POSSE\">POSSE, for Publish (on your) Own Site, Syndicate\nElsewhere</a>.</p>\n\n<p>Ideally… I’ll eventually set it up so that some script automatically posts my\nposts to twitter so that people can interact with it there, but for now I’m\nsyndicating manually.</p>\n\n<h2>Broadcasting</h2>\n\n<p>Sending webmentions is also a manual process. When I post a blog post, I’ll\nmanually run the published URL through the <a href=\"https://rubygems.org/gems/webmention/versions/1.0.2\">webmention\ngem</a>. In the future, I\nplan to include the POSSE syndication to twitter and medium and webmention\nsending somehow in the build step.</p>\n\n<p>I generate a link post every month of all I read, generated from Instapaper\nlinks. Unfortunately I was listing every link as a <code>reply-to</code> using my\nlink-post generator… resulting in several nice blogs getting spamm’d by a\n<em>giant</em> comment that shouldn’t have been sent them. Sorry Jeremy<a href=\"http://evantravers.com/articles/2019/11/14/indieweb-webmentions-on-middleman-or-jekyll/#fn1\">1</a>. :(</p>\n\n<p>I now just list the link which results in a webmention… I haven’t had a good\nreason to use the <a href=\"https://indieweb.org/in-reply-to\"><code>reply-to</code> verb</a> since I\nrealized I was doing it wrong. Sorry everyone.</p>\n\n<h2>Displaying the results</h2>\n\n<p>When I got everything hooked up I could navigate to webmention.io,\nauthenticate, and use the API link to manually view the json of replies. Yay!\nTime to display them.</p>\n\n<p>I wrote a <em>very</em> naive component in Vue.js to get the mentions for a given page\nand display them at the bottom of the page. Right after I wrote it, <a href=\"http://evantravers.com/articles/2019/09/24/world-of-textfiles-meeting-notes/\">the blog\npost I had written about meeting\nnotes</a>\ngot a few kind likes on twitter (thanks to a retweet from\n<a href=\"http://twitter.com/draftsapp\">@draftsapp</a>, so you can see all the lovely\npeople who liked my post or made a comment to it by replying to it on twitter.</p>\n\n<p>The js is relatively simple, and looks like this:</p>\n<pre><code><span>import</span> <span>Vue</span> <span>from</span> <span>'</span><span>vue</span><span>'</span><span>;</span>\n<span>import</span> <span>Axios</span> <span>from</span> <span>'</span><span>axios</span><span>'</span><span>;</span>\n\n<span>(</span><span>function</span><span>()</span> <span>{</span>\n  <span>Vue</span><span>.</span><span>component</span><span>(</span><span>'</span><span>mention-author</span><span>'</span><span>,</span> <span>{</span>\n    <span>props</span><span>:</span> <span>[</span><span>'</span><span>author</span><span>'</span><span>],</span>\n    <span>template</span><span>:</span> <span>`\n      &lt;span class=\"webmention__author\"&gt;\n        &lt;a :href=\"author.url\"&gt;\n          &lt;img v-if=\"author.photo != ''\" :src=\"author.photo\" alt=\"author.name\"&gt;\n          {{ author.name }}\n        &lt;/a&gt;\n      &lt;/span&gt;\n    `</span>\n  <span>});</span>\n\n  <span>Vue</span><span>.</span><span>component</span><span>(</span><span>'</span><span>blog-webmention</span><span>'</span><span>,</span> <span>{</span>\n    <span>props</span><span>:</span> <span>[</span><span>'</span><span>mention</span><span>'</span><span>],</span>\n    <span>template</span><span>:</span> <span>`\n      &lt;div class=\"blog__webmention\"&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'like-of'\"&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 👍'd by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'repost-of'\"&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 🔁'd by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'bookmark-of'\"&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 🔖'd by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'in-reply-to'\"&gt;\n          &lt;p&gt;{{ mention.content.text }}&lt;/p&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 💬'd to by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `</span>\n  <span>});</span>\n\n  <span>var</span> <span>webmentions</span> <span>=</span> <span>new</span> <span>Vue</span><span>({</span>\n    <span>el</span><span>:</span> <span>'</span><span>#webmentions</span><span>'</span><span>,</span>\n    <span>data</span><span>:</span> <span>{</span>\n      <span>mentions</span><span>:</span> <span>[]</span>\n    <span>},</span>\n    <span>mounted</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n      <span>Axios</span><span>.</span><span>get</span><span>(</span><span>\"</span><span>https://webmention.io/api/links.jf2?target=</span><span>\"</span> <span>+</span> <span>window</span><span>.</span><span>location</span><span>.</span><span>href</span><span>)</span>\n        <span>.</span><span>then</span><span>(</span><span>response</span> <span>=&gt;</span> <span>this</span><span>.</span><span>mentions</span> <span>=</span> <span>response</span><span>.</span><span>data</span><span>.</span><span>children</span><span>);</span>\n    <span>}</span>\n  <span>});</span>\n<span>})();</span>\n</code></pre>\n<p>Nothing terribly clever here… there’s some associated css that styles the\navatars and such, but other than that, that’s it. I’ve been meaning to package\nit up as a web component on NPM, but I have not made the time.</p>\n\n<h2>Where to now?</h2>\n\n<h3>Automate syndication and webmentioning</h3>\n\n<p>I mentioned it earlier, but it seems like the obvious step so that I don’t\nforget anything when I’m posting. It’s what automation is for.</p>\n\n<h3>Caching webmentions</h3>\n\n<p>I’d like to pull down all my webmentions from webmention.io on a static\nbuild… cache it in a file and have the js show only the new ones. Hopefully\nthat’ll reduce the load on webmention.io and I like the idea of being able to\nkeep those comments and likes in my filesystem.</p>\n\n<h3>Comment directly on the site</h3>\n\n<p>I think it’d be nice to have a way for people to authenticate and comment right\non the site… no clue how to do that yet, but I’m sure someone in the indieweb\nnetwork is working on it.</p>\n\n<h2>It’s fun!</h2>\n\n<p>I will say… all this is the most fun I’ve had learning and messing around on my\nsite in a <em>long</em> time. It’s fun to figure out, nice people to learn from, and\nit feels like a tiny step towards a healthier me and healthier web ecosystem.</p>\n\n<h2>References:</h2>\n\n<ul><li><a href=\"https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/\">Adding web mention support to a static site</a></li>\n<li><a href=\"https://github.com/indieweb/webmention-client-ruby\">indieweb/webmention-client-ruby</a></li>\n<li><a href=\"https://aaronparecki.com/2018/06/30/11/your-first-webmention\">Your first webmention</a></li>\n<li><a href=\"https://keithjgrant.com/posts/2019/01/low-friction-workflow-for-notes/\">Low Friction Workflow for Notes</a></li>\n</ul>\n<ol><li>\n<p>I’m sorry Jeremy Keith. I really didn’t mean to do <a href=\"https://adactio.com/journal/15260#comment76774\">this</a>. <a href=\"http://evantravers.com/articles/2019/11/14/indieweb-webmentions-on-middleman-or-jekyll/#fnref1\">↩</a></p>\n</li>\n\n</ol>",
        "html": "<p>Recently, <a href=\"https://twitter.com/ttscoff\">@ttscoff</a> asked a little bit about how\nI’m including twitter replies to a blog post on my site. I like building and\nhacking on stuff on my site… so one of my experiments is “joining the\nindieweb.”</p>\n\n<p>There isn’t a right way to implement this stuff… one of the beautiful and\nbewildering things about the indieweb is how open it is… this is just the way\nthat I have it working for now.</p>\n\n<h2>What is the Indieweb?</h2>\n\n<blockquote>\n<p>When you post something on the web, it should belong to you, not a\ncorporation. Too many companies have gone out of business and lost all of\ntheir users’ data. By joining the IndieWeb, your content stays yours and in\nyour control.</p>\n\n<p>— <a href=\"https://indieweb.org/\">indiweb.org</a></p>\n</blockquote>\n\n<p>I’ve missed the old days of exciting, self-built social networks, web-rings,\nand such, and as with all new tech… I like the idea of owning my own content,\nbut still being connected and part of a network. I like the idea of not being\nbeholden to some social giant to connect me and steal all my data.</p>\n\n<p>At the moment, indieweb development is a really fun, rowdy, neat group of\ndevelopers experimenting and connecting mostly on the indieweb wiki and IRC.\nThere is a slack mirror of the IRC if that’s your jam.</p>\n\n<p>To learn more, check out <a href=\"https://indieweb.org/\">indieweb.org</a> or the <a href=\"https://indieweb.org/Getting_Started\">Getting\nStarted page</a> on the wiki.</p>\n\n<h2>Tech Details</h2>\n\n<p>My blog uses <a href=\"https://middlemanapp.com\">middleman</a> for static-site generation.\nI’m sure this process should also work for Jekyll, or any other <a href=\"http://staticgen.com\">static\nwebsites</a>.</p>\n\n<p>Using a static site means that all you see is sitting as a static file on S3.\nThat means that I don’t have a server to respond to queries and requests or do\nthe “thinking” for my website… so for the moment I’m going to have to lean on\nsome others.</p>\n\n<p>I think that other folks like Keith Grant are using webmentions and micropub to\nmake their blog more responsive as they move around the web… I may look into\nmaking that work for me. Seems like a fun use case for elixir… but that’s\nlater. For now, it’s a ruby build script, and some javascript talking to other\ntools to connect everything. More on that.</p>\n\n<p>While working on getting everything configured correctly, I used several tools\nto debug my setup. Probably the most helpful was\n<a href=\"https://indiewebify.me/\">indiewebify.me</a>. I did experience problems with\nseveral of the tools because I was <a href=\"https://middlemanapp.com/advanced/file-size-optimization/\">compressing files on S3 using\ngzip</a> and it was\ninterfering somehow with the scraper. Once I turned that off everything went a\nlot smoother.</p>\n\n<h2>Identity: setting up your indieweb profile</h2>\n\n<p>When you set up a social network… first you set up your profile. It’s the same\nfor the indieweb!</p>\n\n<h3>webmention.io</h3>\n\n<p>My static site can’t respond to anything… so someone else has to do the\nlistening for me. I’m using <a href=\"http://webmention.io\">http://webmention.io</a> after\nfinding it either in a guide or on the wiki.</p>\n\n<p>I first authenticated my site on <a href=\"http://webmention.io\">webmention.io</a> using a\ntwitter link… it uses another service called indielogin.com to identify people\nby the services they list on their website.</p>\n\n<p>Basically: I can login to twitter. My twitter links to my website and vice\nversa. If I can log into my twitter, I can oauth and identify me as the person\nwho owns my website. Cool!</p>\n\n<p>The install guide on webmention.io walked me through adding the “pingback\nURLs\"… this means that if someone wants to comment on this website, that’s\nwhere they should send their webmention.</p>\n\n<h3>h-card</h3>\n\n<p>I also had provide information about myself on my site. Using\n<a href=\"https://developer.mozilla.org/en-US/docs/Web/HTML/microformats\">microformats</a>\non an element classed <code>.h-card</code>, you can describe and specify details. If you\nsend someone a webmention, their service will look at your homepage to find\ninformation about you.</p>\n\n<p>Here’s the current <code>h-card</code> from my home page:</p>\n<pre><code><span>&lt;div</span> <span>class=</span><span>\"h-card  p-author  u-author  hidden\"</span><span>&gt;</span>\n  <span>&lt;img</span> <span>class=</span><span>\"u-photo\"</span> <span>src=</span><span>\"http://evantravers.com/images/avatar.jpg\"</span> <span>alt=</span><span>\"\"</span><span>&gt;</span>\n  <span>&lt;p</span> <span>class=</span><span>\"p-note\"</span><span>&gt;</span>\n    I make tools and tell stories. In love with the grace I have found, and\n    finding myself currently in <span>&lt;span</span> <span>class=</span><span>\"p-locality\"</span><span>&gt;</span>Birmingham, AL<span>&lt;/span&gt;</span>.\n  <span>&lt;/p&gt;</span>\n  <span>&lt;a</span> <span>href=</span><span>\"http://evantravers.com/\"</span> <span>class=</span><span>\"u-url  u-uid  p-name\"</span> <span>rel=</span><span>\"me\"</span><span>&gt;</span>Evan Travers<span>&lt;/a&gt;</span>\n  <span>&lt;a</span> <span>href=</span><span>\"mailto:evantravers@gmail.com\"</span> <span>rel=</span><span>\"me\"</span> <span>class=</span><span>\"u-email\"</span><span>&gt;</span>evantravers@gmail.com<span>&lt;/a&gt;</span>\n<span>&lt;/div&gt;</span>\n</code></pre>\n<p>It’s pretty simple… it’s a structured document with some additional microformat\nmarkup to tell other programs how the fields are classified.</p>\n\n<p>At the moment, it’s invisible from view, which isn’t the best thing to do. The\n<code>h-card</code> on <a href=\"http://adactio.com\">Jeremy Keith’s blog Adactio</a> is a lot\nclassier.</p>\n\n<p><img src=\"http://evantravers.com/images/articles/2019/11/adactio.com_.png\" alt=\"image of the h-card on Adactio.com\" /></p>\n\n<p>You can see the results of my <code>h-card</code> by visiting this <a href=\"http://pin13.net/mf2/?url=http%3A%2F%2Fevantravers.com%2Farticles%2F2019%2F11%2F12%2Fshell-game-trying-out-fish%2F\">microformats\nparser</a>.</p>\n\n<p>There’s a little confusion here… if you read on the <a href=\"http://microformats.org/wiki/h-card#Backward_Compatibility\">microformats\nwiki</a>, you’ll find\nthat there’s another format called <code>vcard</code> that you can add for backwards\ncompatibility. There was also debate as to what fields should be included\nwhere… There’s a lot of change and iteration as people experiment and let\nexperiments die… just part of the indieweb world I guess. The IRC at #indieweb\nor <a href=\"https://chat.indieweb.org/slack\">slack channel</a> is really helpful here.</p>\n\n<h2>Connecting the dots</h2>\n\n<p>Now someone who scrapes my site can see who I am and what accounts on other\nsites I’m associated with… and webmention.io is listening on my behalf for any\nwebmentions that might be sent my way… time to start posting and talking!</p>\n\n<h3>Listening: Twitter Conversations</h3>\n\n<p>For connecting my site to others, I’m using <a href=\"https://brid.gy/\">brid.gy</a>.</p>\n\n<p><img src=\"http://evantravers.com/images/articles/2019/11/bridgy.png\" alt=\"screenshot of brid.gy's home page\" /></p>\n\n<blockquote>\n<p>Bridgy connects your web site to social media. Likes, retweets, mentions,\ncross-posting, and more…</p>\n</blockquote>\n\n<p>I hooked up my twitter to bridgy, so it’s trolling my twitter periodically and\nsending webmentions for me! The result of this is if I post a tweet containing\na link to a page on my website, brid.gy is listening and sends a webmention\nback to my URL. This even works for replies, likes, and retweets… you can\ninteract with my content on other services, and it all comes back to my\npersonal site.</p>\n\n<p>The indieweb calls this <a href=\"https://indieweb.org/POSSE\">POSSE, for Publish (on your) Own Site, Syndicate\nElsewhere</a>.</p>\n\n<p>Ideally… I’ll eventually set it up so that some script automatically posts my\nposts to twitter so that people can interact with it there, but for now I’m\nsyndicating manually.</p>\n\n<h2>Broadcasting</h2>\n\n<p>Sending webmentions is also a manual process. When I post a blog post, I’ll\nmanually run the published URL through the <a href=\"https://rubygems.org/gems/webmention/versions/1.0.2\">webmention\ngem</a>. In the future, I\nplan to include the POSSE syndication to twitter and medium and webmention\nsending somehow in the build step.</p>\n\n<p>I generate a link post every month of all I read, generated from Instapaper\nlinks. Unfortunately I was listing every link as a <code>reply-to</code> using my\nlink-post generator… resulting in several nice blogs getting spamm’d by a\n<em>giant</em> comment that shouldn’t have been sent them. Sorry Jeremy<a href=\"http://evantravers.com/articles/2019/11/14/indieweb-webmentions-on-middleman-or-jekyll/#fn1\">1</a>. :(</p>\n\n<p>I now just list the link which results in a webmention… I haven’t had a good\nreason to use the <a href=\"https://indieweb.org/in-reply-to\"><code>reply-to</code> verb</a> since I\nrealized I was doing it wrong. Sorry everyone.</p>\n\n<h2>Displaying the results</h2>\n\n<p>When I got everything hooked up I could navigate to webmention.io,\nauthenticate, and use the API link to manually view the json of replies. Yay!\nTime to display them.</p>\n\n<p>I wrote a <em>very</em> naive component in Vue.js to get the mentions for a given page\nand display them at the bottom of the page. Right after I wrote it, <a href=\"http://evantravers.com/articles/2019/09/24/world-of-textfiles-meeting-notes/\">the blog\npost I had written about meeting\nnotes</a>\ngot a few kind likes on twitter (thanks to a retweet from\n<a href=\"http://twitter.com/draftsapp\">@draftsapp</a>, so you can see all the lovely\npeople who liked my post or made a comment to it by replying to it on twitter.</p>\n\n<p>The js is relatively simple, and looks like this:</p>\n<pre><code><span>import</span> <span>Vue</span> <span>from</span> <span>'</span><span>vue</span><span>'</span><span>;</span>\n<span>import</span> <span>Axios</span> <span>from</span> <span>'</span><span>axios</span><span>'</span><span>;</span>\n\n<span>(</span><span>function</span><span>()</span> <span>{</span>\n  <span>Vue</span><span>.</span><span>component</span><span>(</span><span>'</span><span>mention-author</span><span>'</span><span>,</span> <span>{</span>\n    <span>props</span><span>:</span> <span>[</span><span>'</span><span>author</span><span>'</span><span>],</span>\n    <span>template</span><span>:</span> <span>`\n      &lt;span class=\"webmention__author\"&gt;\n        &lt;a :href=\"author.url\"&gt;\n          &lt;img v-if=\"author.photo != ''\" :src=\"author.photo\" alt=\"author.name\"&gt;\n          {{ author.name }}\n        &lt;/a&gt;\n      &lt;/span&gt;\n    `</span>\n  <span>});</span>\n\n  <span>Vue</span><span>.</span><span>component</span><span>(</span><span>'</span><span>blog-webmention</span><span>'</span><span>,</span> <span>{</span>\n    <span>props</span><span>:</span> <span>[</span><span>'</span><span>mention</span><span>'</span><span>],</span>\n    <span>template</span><span>:</span> <span>`\n      &lt;div class=\"blog__webmention\"&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'like-of'\"&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 👍'd by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'repost-of'\"&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 🔁'd by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'bookmark-of'\"&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 🔖'd by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n        &lt;div v-if=\"mention['wm-property'] == 'in-reply-to'\"&gt;\n          &lt;p&gt;{{ mention.content.text }}&lt;/p&gt;\n          &lt;a :href=\"mention.url\"&gt;#&lt;/a&gt; 💬'd to by &lt;mention-author :author=\"mention.author\"&gt;&lt;/mention-author&gt;\n        &lt;/div&gt;\n      &lt;/div&gt;\n    `</span>\n  <span>});</span>\n\n  <span>var</span> <span>webmentions</span> <span>=</span> <span>new</span> <span>Vue</span><span>({</span>\n    <span>el</span><span>:</span> <span>'</span><span>#webmentions</span><span>'</span><span>,</span>\n    <span>data</span><span>:</span> <span>{</span>\n      <span>mentions</span><span>:</span> <span>[]</span>\n    <span>},</span>\n    <span>mounted</span><span>:</span> <span>function</span><span>()</span> <span>{</span>\n      <span>Axios</span><span>.</span><span>get</span><span>(</span><span>\"</span><span>https://webmention.io/api/links.jf2?target=</span><span>\"</span> <span>+</span> <span>window</span><span>.</span><span>location</span><span>.</span><span>href</span><span>)</span>\n        <span>.</span><span>then</span><span>(</span><span>response</span> <span>=&gt;</span> <span>this</span><span>.</span><span>mentions</span> <span>=</span> <span>response</span><span>.</span><span>data</span><span>.</span><span>children</span><span>);</span>\n    <span>}</span>\n  <span>});</span>\n<span>})();</span>\n</code></pre>\n<p>Nothing terribly clever here… there’s some associated css that styles the\navatars and such, but other than that, that’s it. I’ve been meaning to package\nit up as a web component on NPM, but I have not made the time.</p>\n\n<h2>Where to now?</h2>\n\n<h3>Automate syndication and webmentioning</h3>\n\n<p>I mentioned it earlier, but it seems like the obvious step so that I don’t\nforget anything when I’m posting. It’s what automation is for.</p>\n\n<h3>Caching webmentions</h3>\n\n<p>I’d like to pull down all my webmentions from webmention.io on a static\nbuild… cache it in a file and have the js show only the new ones. Hopefully\nthat’ll reduce the load on webmention.io and I like the idea of being able to\nkeep those comments and likes in my filesystem.</p>\n\n<h3>Comment directly on the site</h3>\n\n<p>I think it’d be nice to have a way for people to authenticate and comment right\non the site… no clue how to do that yet, but I’m sure someone in the indieweb\nnetwork is working on it.</p>\n\n<h2>It’s fun!</h2>\n\n<p>I will say… all this is the most fun I’ve had learning and messing around on my\nsite in a <em>long</em> time. It’s fun to figure out, nice people to learn from, and\nit feels like a tiny step towards a healthier me and healthier web ecosystem.</p>\n\n<h2>References:</h2>\n\n<ul><li><a href=\"https://keithjgrant.com/posts/2019/02/adding-webmention-support-to-a-static-site/\">Adding web mention support to a static site</a></li>\n<li><a href=\"https://github.com/indieweb/webmention-client-ruby\">indieweb/webmention-client-ruby</a></li>\n<li><a href=\"https://aaronparecki.com/2018/06/30/11/your-first-webmention\">Your first webmention</a></li>\n<li><a href=\"https://keithjgrant.com/posts/2019/01/low-friction-workflow-for-notes/\">Low Friction Workflow for Notes</a></li>\n</ul>\n<ol><li>\n<p>I’m sorry Jeremy Keith. I really didn’t mean to do <a href=\"https://adactio.com/journal/15260#comment76774\">this</a>. <a href=\"http://evantravers.com/articles/2019/11/14/indieweb-webmentions-on-middleman-or-jekyll/#fnref1\">↩</a></p>\n</li>\n\n</ol>",
        "text": "Recently, @ttscoff asked a little bit about how\nI’m including twitter replies to a blog post on my site. I like building and\nhacking on stuff on my site… so one of my experiments is “joining the\nindieweb.”\n\nThere isn’t a right way to implement this stuff… one of the beautiful and\nbewildering things about the indieweb is how open it is… this is just the way\nthat I have it working for now.\n\nWhat is the Indieweb?\n\n\nWhen you post something on the web, it should belong to you, not a\ncorporation. Too many companies have gone out of business and lost all of\ntheir users’ data. By joining the IndieWeb, your content stays yours and in\nyour control.\n\n— indiweb.org\n\n\nI’ve missed the old days of exciting, self-built social networks, web-rings,\nand such, and as with all new tech… I like the idea of owning my own content,\nbut still being connected and part of a network. I like the idea of not being\nbeholden to some social giant to connect me and steal all my data.\n\nAt the moment, indieweb development is a really fun, rowdy, neat group of\ndevelopers experimenting and connecting mostly on the indieweb wiki and IRC.\nThere is a slack mirror of the IRC if that’s your jam.\n\nTo learn more, check out indieweb.org or the Getting\nStarted page on the wiki.\n\nTech Details\n\nMy blog uses middleman for static-site generation.\nI’m sure this process should also work for Jekyll, or any other static\nwebsites.\n\nUsing a static site means that all you see is sitting as a static file on S3.\nThat means that I don’t have a server to respond to queries and requests or do\nthe “thinking” for my website… so for the moment I’m going to have to lean on\nsome others.\n\nI think that other folks like Keith Grant are using webmentions and micropub to\nmake their blog more responsive as they move around the web… I may look into\nmaking that work for me. Seems like a fun use case for elixir… but that’s\nlater. For now, it’s a ruby build script, and some javascript talking to other\ntools to connect everything. More on that.\n\nWhile working on getting everything configured correctly, I used several tools\nto debug my setup. Probably the most helpful was\nindiewebify.me. I did experience problems with\nseveral of the tools because I was compressing files on S3 using\ngzip and it was\ninterfering somehow with the scraper. Once I turned that off everything went a\nlot smoother.\n\nIdentity: setting up your indieweb profile\n\nWhen you set up a social network… first you set up your profile. It’s the same\nfor the indieweb!\n\nwebmention.io\n\nMy static site can’t respond to anything… so someone else has to do the\nlistening for me. I’m using http://webmention.io after\nfinding it either in a guide or on the wiki.\n\nI first authenticated my site on webmention.io using a\ntwitter link… it uses another service called indielogin.com to identify people\nby the services they list on their website.\n\nBasically: I can login to twitter. My twitter links to my website and vice\nversa. If I can log into my twitter, I can oauth and identify me as the person\nwho owns my website. Cool!\n\nThe install guide on webmention.io walked me through adding the “pingback\nURLs\"… this means that if someone wants to comment on this website, that’s\nwhere they should send their webmention.\n\nh-card\n\nI also had provide information about myself on my site. Using\nmicroformats\non an element classed .h-card, you can describe and specify details. If you\nsend someone a webmention, their service will look at your homepage to find\ninformation about you.\n\nHere’s the current h-card from my home page:\n<div class=\"h-card  p-author  u-author  hidden\">\n  <img class=\"u-photo\" src=\"http://evantravers.com/images/avatar.jpg\" alt=\"\">\n  <p class=\"p-note\">\n    I make tools and tell stories. In love with the grace I have found, and\n    finding myself currently in <span class=\"p-locality\">Birmingham, AL</span>.\n  </p>\n  <a href=\"http://evantravers.com/\" class=\"u-url  u-uid  p-name\" rel=\"me\">Evan Travers</a>\n  <a href=\"mailto:evantravers@gmail.com\" rel=\"me\" class=\"u-email\">evantravers@gmail.com</a>\n</div>\n\nIt’s pretty simple… it’s a structured document with some additional microformat\nmarkup to tell other programs how the fields are classified.\n\nAt the moment, it’s invisible from view, which isn’t the best thing to do. The\nh-card on Jeremy Keith’s blog Adactio is a lot\nclassier.\n\n\n\nYou can see the results of my h-card by visiting this microformats\nparser.\n\nThere’s a little confusion here… if you read on the microformats\nwiki, you’ll find\nthat there’s another format called vcard that you can add for backwards\ncompatibility. There was also debate as to what fields should be included\nwhere… There’s a lot of change and iteration as people experiment and let\nexperiments die… just part of the indieweb world I guess. The IRC at #indieweb\nor slack channel is really helpful here.\n\nConnecting the dots\n\nNow someone who scrapes my site can see who I am and what accounts on other\nsites I’m associated with… and webmention.io is listening on my behalf for any\nwebmentions that might be sent my way… time to start posting and talking!\n\nListening: Twitter Conversations\n\nFor connecting my site to others, I’m using brid.gy.\n\n\n\n\nBridgy connects your web site to social media. Likes, retweets, mentions,\ncross-posting, and more…\n\n\nI hooked up my twitter to bridgy, so it’s trolling my twitter periodically and\nsending webmentions for me! The result of this is if I post a tweet containing\na link to a page on my website, brid.gy is listening and sends a webmention\nback to my URL. This even works for replies, likes, and retweets… you can\ninteract with my content on other services, and it all comes back to my\npersonal site.\n\nThe indieweb calls this POSSE, for Publish (on your) Own Site, Syndicate\nElsewhere.\n\nIdeally… I’ll eventually set it up so that some script automatically posts my\nposts to twitter so that people can interact with it there, but for now I’m\nsyndicating manually.\n\nBroadcasting\n\nSending webmentions is also a manual process. When I post a blog post, I’ll\nmanually run the published URL through the webmention\ngem. In the future, I\nplan to include the POSSE syndication to twitter and medium and webmention\nsending somehow in the build step.\n\nI generate a link post every month of all I read, generated from Instapaper\nlinks. Unfortunately I was listing every link as a reply-to using my\nlink-post generator… resulting in several nice blogs getting spamm’d by a\ngiant comment that shouldn’t have been sent them. Sorry Jeremy1. :(\n\nI now just list the link which results in a webmention… I haven’t had a good\nreason to use the reply-to verb since I\nrealized I was doing it wrong. Sorry everyone.\n\nDisplaying the results\n\nWhen I got everything hooked up I could navigate to webmention.io,\nauthenticate, and use the API link to manually view the json of replies. Yay!\nTime to display them.\n\nI wrote a very naive component in Vue.js to get the mentions for a given page\nand display them at the bottom of the page. Right after I wrote it, the blog\npost I had written about meeting\nnotes\ngot a few kind likes on twitter (thanks to a retweet from\n@draftsapp, so you can see all the lovely\npeople who liked my post or made a comment to it by replying to it on twitter.\n\nThe js is relatively simple, and looks like this:\nimport Vue from 'vue';\nimport Axios from 'axios';\n\n(function() {\n  Vue.component('mention-author', {\n    props: ['author'],\n    template: `\n      <span class=\"webmention__author\">\n        <a :href=\"author.url\">\n          <img v-if=\"author.photo != ''\" :src=\"author.photo\" alt=\"author.name\">\n          {{ author.name }}\n        </a>\n      </span>\n    `\n  });\n\n  Vue.component('blog-webmention', {\n    props: ['mention'],\n    template: `\n      <div class=\"blog__webmention\">\n        <div v-if=\"mention['wm-property'] == 'like-of'\">\n          <a :href=\"mention.url\">#</a> 👍'd by <mention-author :author=\"mention.author\"></mention-author>\n        </div>\n        <div v-if=\"mention['wm-property'] == 'repost-of'\">\n          <a :href=\"mention.url\">#</a> 🔁'd by <mention-author :author=\"mention.author\"></mention-author>\n        </div>\n        <div v-if=\"mention['wm-property'] == 'bookmark-of'\">\n          <a :href=\"mention.url\">#</a> 🔖'd by <mention-author :author=\"mention.author\"></mention-author>\n        </div>\n        <div v-if=\"mention['wm-property'] == 'in-reply-to'\">\n          <p>{{ mention.content.text }}</p>\n          <a :href=\"mention.url\">#</a> 💬'd to by <mention-author :author=\"mention.author\"></mention-author>\n        </div>\n      </div>\n    `\n  });\n\n  var webmentions = new Vue({\n    el: '#webmentions',\n    data: {\n      mentions: []\n    },\n    mounted: function() {\n      Axios.get(\"https://webmention.io/api/links.jf2?target=\" + window.location.href)\n        .then(response => this.mentions = response.data.children);\n    }\n  });\n})();\n\nNothing terribly clever here… there’s some associated css that styles the\navatars and such, but other than that, that’s it. I’ve been meaning to package\nit up as a web component on NPM, but I have not made the time.\n\nWhere to now?\n\nAutomate syndication and webmentioning\n\nI mentioned it earlier, but it seems like the obvious step so that I don’t\nforget anything when I’m posting. It’s what automation is for.\n\nCaching webmentions\n\nI’d like to pull down all my webmentions from webmention.io on a static\nbuild… cache it in a file and have the js show only the new ones. Hopefully\nthat’ll reduce the load on webmention.io and I like the idea of being able to\nkeep those comments and likes in my filesystem.\n\nComment directly on the site\n\nI think it’d be nice to have a way for people to authenticate and comment right\non the site… no clue how to do that yet, but I’m sure someone in the indieweb\nnetwork is working on it.\n\nIt’s fun!\n\nI will say… all this is the most fun I’ve had learning and messing around on my\nsite in a long time. It’s fun to figure out, nice people to learn from, and\nit feels like a tiny step towards a healthier me and healthier web ecosystem.\n\nReferences:\n\nAdding web mention support to a static site\nindieweb/webmention-client-ruby\nYour first webmention\nLow Friction Workflow for Notes\n\nI’m sorry Jeremy Keith. I really didn’t mean to do this. ↩"
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "fluffy",
        "photo": "https://webmention.io/avatar/beesbuzz.biz/d7437fcddfe476ea3ac89d5355ca01e8fac4a4cc089b78ac2db785e64164bc59.jpg",
        "url": "https://beesbuzz.biz/"
      },
      "url": "https://beesbuzz.biz/blog/6283-Just-thought-I-should-Web-Mention",
      "published": "2018-09-28T14:17:43-07:00",
      "wm-received": "2019-09-23T18:56:05Z",
      "wm-id": 697306,
      "wm-source": "https://beesbuzz.biz/blog/6283-Just-thought-I-should-Web-Mention",
      "wm-target": "http://webmention.io",
      "name": "Just thought I should (Web)Mention…",
      "syndication": [
        "https://indieweb.xyz/en/meta",
        "https://indieweb.xyz/en/indieweb",
        "https://indieweb.xyz/en/development"
      ],
      "summary": {
        "content-type": "text/plain",
        "value": "I've been building Publ with IndieWeb principles in mind. One of the things I'm playing with right now is adding in very basic support for WebMention."
      },
      "content": {
        "content-type": "text/html",
        "value": "<p>I’ve been building <a href=\"http://publ.beesbuzz.biz\">Publ</a> with <a href=\"https://indieweb.org/\">IndieWeb</a> principles in mind. One of the things I’m playing with right now is adding in <a href=\"https://github.com/fluffy-critter/Publ/issues/128\">very basic support for WebMention</a>.</p>\n                \n                \n                \n\n                \n                \n                \n<p>There’s a few different ways to go about doing it. For now, on my own sites I’m just using <a href=\"http://webmention.io\">webmention.io</a> as a third-party endpoint, because that’s easy enough for me to set up, and I don’t want to be in a position of adding a greater setup/support burden to the average theoretical Publ user who just wants to get a website up and running. I will certainly add this into any documentation improvments for the <a href=\"http://publ.beesbuzz.biz/getting-started\">getting started guide</a>, of course. Basically I think people should be able to use whatever WebMention endpoint that they want, just as people can use whatever external comment system they want (Disqus, IntenseDebate, etc.). There’s also an interesting <a href=\"https://webmention.herokuapp.com\">Disqus-like WebMention broker</a> that is currently in very early development and lets you simply embed an externally-hosted Javascript-included WebMention feed onto your page; unfortunately it’s not open to the general public just yet but it’s definitely one to keep an eye on.</p>\n<p>I’m not sure if I’d want it to completely replace Disqus though; I can easily go both ways on that sort of thing. And in the meantime, there’s also <a href=\"http://brid.gy\">Bridgy</a> which will forward WebMention stuff on to Disqus, which I might end up setting up as well. (That also has the dubious benefit of pulling in twitter-based responses among other things as well.)</p>\n<p>As far as <em>sending</em> WebMention goes, that side of things looks a lot simpler, and I already have a basic plan forward, although that will definitely require writing code. Also at the moment the plan forward means also re-sending the mentions out every time an item gets re-indexed, and on Heroku deployments in particular that will get <em>quite spammy</em>. I’m thinking that for that stuff it might be okay to recommend an optional configuration of having a persistent database for outgoing WebMentions; fortunately that’s not a thing that will be subject to schema changes since all it really needs to track is:</p>\n<ul><li>The entry ID</li>\n<li>The outgoing URL</li>\n<li>Whether it’s been sent successfully (or a general status code I guess)</li>\n<li>When the mention was most recently attempted</li>\n</ul><p>I’m not really clear on what the intention is supposed to be yet on re-sending mentions; like, once a mention gets sent successfully, can we assume that the mention will always be remembered down the road and should never be re-sent? Is it okay to re-send mentions and assume that the recipient will automatically filter out duplicates? What happens as a blog grows to a few thousand entries, and links to blogs that don’t support WebMentions originally but later we want to try re-sending retroactive mentions in case a site has gained that ability? And so on.</p>\n<p>Or maybe the outgoing mentions should be done as a log? Like, we just look at the most recent <code>&lt;source,target&gt;</code> pair that matches, and if the code was a failure and was more than, say, a week ago, we try again?</p>\n<p>Update: Per <a href=\"https://www.w3.org/TR/webmention/#updating-existing-webmentions\">the spec</a> it seems that the expectation is that any time an entry updates for whatever reason it should re-send all its pings. Well, I guess that means I’m not going to worry about persisting information about pings that have been sent (although obviously I’ll de-dupe them on each update).</p>\n<p>Anyway, one neat thing I learned about from webmention.io is an emerging cross-site authentication mechanism via <a href=\"https://indieauth.com\">IndieAuth</a>, which seems to be a really nice way of supporting OAuth without requiring a crapton of OAuth endpoints! I think that gives me a mechanism for going forward on my long-planned-but-never-quite-thought-out friends-only/ACL stuff. (Although that also requires some thought when it comes to persistence. Gahhhhh persistence keeps on rearing its ugly head….)</p>\n<p>Well, whatever. This seems to be a great time to be developing software along these principles that I’ve always held, and it’s great seeing this critical mass forming around these things I’ve been espousing on and off since 2001 or so.</p>\n<p>(Now if only I had the spoons to also develop a heckin' next-gen RSS/Atom reader…)</p>",
        "html": "<p>I’ve been building <a href=\"http://publ.beesbuzz.biz\">Publ</a> with <a href=\"https://indieweb.org/\">IndieWeb</a> principles in mind. One of the things I’m playing with right now is adding in <a href=\"https://github.com/fluffy-critter/Publ/issues/128\">very basic support for WebMention</a>.</p>\n                \n                \n                \n\n                \n                \n                \n<p>There’s a few different ways to go about doing it. For now, on my own sites I’m just using <a href=\"http://webmention.io\">webmention.io</a> as a third-party endpoint, because that’s easy enough for me to set up, and I don’t want to be in a position of adding a greater setup/support burden to the average theoretical Publ user who just wants to get a website up and running. I will certainly add this into any documentation improvments for the <a href=\"http://publ.beesbuzz.biz/getting-started\">getting started guide</a>, of course. Basically I think people should be able to use whatever WebMention endpoint that they want, just as people can use whatever external comment system they want (Disqus, IntenseDebate, etc.). There’s also an interesting <a href=\"https://webmention.herokuapp.com\">Disqus-like WebMention broker</a> that is currently in very early development and lets you simply embed an externally-hosted Javascript-included WebMention feed onto your page; unfortunately it’s not open to the general public just yet but it’s definitely one to keep an eye on.</p>\n<p>I’m not sure if I’d want it to completely replace Disqus though; I can easily go both ways on that sort of thing. And in the meantime, there’s also <a href=\"http://brid.gy\">Bridgy</a> which will forward WebMention stuff on to Disqus, which I might end up setting up as well. (That also has the dubious benefit of pulling in twitter-based responses among other things as well.)</p>\n<p>As far as <em>sending</em> WebMention goes, that side of things looks a lot simpler, and I already have a basic plan forward, although that will definitely require writing code. Also at the moment the plan forward means also re-sending the mentions out every time an item gets re-indexed, and on Heroku deployments in particular that will get <em>quite spammy</em>. I’m thinking that for that stuff it might be okay to recommend an optional configuration of having a persistent database for outgoing WebMentions; fortunately that’s not a thing that will be subject to schema changes since all it really needs to track is:</p>\n<ul><li>The entry ID</li>\n<li>The outgoing URL</li>\n<li>Whether it’s been sent successfully (or a general status code I guess)</li>\n<li>When the mention was most recently attempted</li>\n</ul><p>I’m not really clear on what the intention is supposed to be yet on re-sending mentions; like, once a mention gets sent successfully, can we assume that the mention will always be remembered down the road and should never be re-sent? Is it okay to re-send mentions and assume that the recipient will automatically filter out duplicates? What happens as a blog grows to a few thousand entries, and links to blogs that don’t support WebMentions originally but later we want to try re-sending retroactive mentions in case a site has gained that ability? And so on.</p>\n<p>Or maybe the outgoing mentions should be done as a log? Like, we just look at the most recent <code>&lt;source,target&gt;</code> pair that matches, and if the code was a failure and was more than, say, a week ago, we try again?</p>\n<p>Update: Per <a href=\"https://www.w3.org/TR/webmention/#updating-existing-webmentions\">the spec</a> it seems that the expectation is that any time an entry updates for whatever reason it should re-send all its pings. Well, I guess that means I’m not going to worry about persisting information about pings that have been sent (although obviously I’ll de-dupe them on each update).</p>\n<p>Anyway, one neat thing I learned about from webmention.io is an emerging cross-site authentication mechanism via <a href=\"https://indieauth.com\">IndieAuth</a>, which seems to be a really nice way of supporting OAuth without requiring a crapton of OAuth endpoints! I think that gives me a mechanism for going forward on my long-planned-but-never-quite-thought-out friends-only/ACL stuff. (Although that also requires some thought when it comes to persistence. Gahhhhh persistence keeps on rearing its ugly head….)</p>\n<p>Well, whatever. This seems to be a great time to be developing software along these principles that I’ve always held, and it’s great seeing this critical mass forming around these things I’ve been espousing on and off since 2001 or so.</p>\n<p>(Now if only I had the spoons to also develop a heckin' next-gen RSS/Atom reader…)</p>",
        "text": "I’ve been building Publ with IndieWeb principles in mind. One of the things I’m playing with right now is adding in very basic support for WebMention.\n                \n                \n                \n\n                \n                \n                \nThere’s a few different ways to go about doing it. For now, on my own sites I’m just using webmention.io as a third-party endpoint, because that’s easy enough for me to set up, and I don’t want to be in a position of adding a greater setup/support burden to the average theoretical Publ user who just wants to get a website up and running. I will certainly add this into any documentation improvments for the getting started guide, of course. Basically I think people should be able to use whatever WebMention endpoint that they want, just as people can use whatever external comment system they want (Disqus, IntenseDebate, etc.). There’s also an interesting Disqus-like WebMention broker that is currently in very early development and lets you simply embed an externally-hosted Javascript-included WebMention feed onto your page; unfortunately it’s not open to the general public just yet but it’s definitely one to keep an eye on.\nI’m not sure if I’d want it to completely replace Disqus though; I can easily go both ways on that sort of thing. And in the meantime, there’s also Bridgy which will forward WebMention stuff on to Disqus, which I might end up setting up as well. (That also has the dubious benefit of pulling in twitter-based responses among other things as well.)\nAs far as sending WebMention goes, that side of things looks a lot simpler, and I already have a basic plan forward, although that will definitely require writing code. Also at the moment the plan forward means also re-sending the mentions out every time an item gets re-indexed, and on Heroku deployments in particular that will get quite spammy. I’m thinking that for that stuff it might be okay to recommend an optional configuration of having a persistent database for outgoing WebMentions; fortunately that’s not a thing that will be subject to schema changes since all it really needs to track is:\nThe entry ID\nThe outgoing URL\nWhether it’s been sent successfully (or a general status code I guess)\nWhen the mention was most recently attempted\nI’m not really clear on what the intention is supposed to be yet on re-sending mentions; like, once a mention gets sent successfully, can we assume that the mention will always be remembered down the road and should never be re-sent? Is it okay to re-send mentions and assume that the recipient will automatically filter out duplicates? What happens as a blog grows to a few thousand entries, and links to blogs that don’t support WebMentions originally but later we want to try re-sending retroactive mentions in case a site has gained that ability? And so on.\nOr maybe the outgoing mentions should be done as a log? Like, we just look at the most recent <source,target> pair that matches, and if the code was a failure and was more than, say, a week ago, we try again?\nUpdate: Per the spec it seems that the expectation is that any time an entry updates for whatever reason it should re-send all its pings. Well, I guess that means I’m not going to worry about persisting information about pings that have been sent (although obviously I’ll de-dupe them on each update).\nAnyway, one neat thing I learned about from webmention.io is an emerging cross-site authentication mechanism via IndieAuth, which seems to be a really nice way of supporting OAuth without requiring a crapton of OAuth endpoints! I think that gives me a mechanism for going forward on my long-planned-but-never-quite-thought-out friends-only/ACL stuff. (Although that also requires some thought when it comes to persistence. Gahhhhh persistence keeps on rearing its ugly head….)\nWell, whatever. This seems to be a great time to be developing software along these principles that I’ve always held, and it’s great seeing this critical mass forming around these things I’ve been espousing on and off since 2001 or so.\n(Now if only I had the spoons to also develop a heckin' next-gen RSS/Atom reader…)"
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "fluffy",
        "photo": "https://webmention.io/avatar/beesbuzz.biz/d7437fcddfe476ea3ac89d5355ca01e8fac4a4cc089b78ac2db785e64164bc59.jpg",
        "url": "https://beesbuzz.biz/"
      },
      "url": "https://beesbuzz.biz/blog/975-Various-life-status-etc-updates",
      "published": "2019-02-11T22:45:09-08:00",
      "wm-received": "2019-08-21T20:49:24Z",
      "wm-id": 672728,
      "wm-source": "https://beesbuzz.biz/blog/975-Various-life-status-etc-updates",
      "wm-target": "http://webmention.io",
      "name": "Various life/status/etc. updates",
      "syndication": [
        "https://indieweb.xyz/en/health",
        "https://indieweb.xyz/en/wrists",
        "https://indieweb.xyz/en/fibromyalgia",
        "https://indieweb.xyz/en/music"
      ],
      "summary": {
        "content-type": "text/plain",
        "value": "So, Seattle's been basically shut down for most of the past, oh, week and change, thanks to the snow. People did overreact to the news of the snow (did they really need to stock up with a month's worth of bread and milk?) but the various shutdowns do otherwise make sense; Seattle is very hilly and when it snows it gets icy and slippery. And some caution does make sense for having a nonperishable food supply, since power outages are a thing. The really remarkable thing is just *how much* snow we've gotten this year; most years we'll get none or just a light dusting, or maybe we'll get one or two snow days when it gets especially bad."
      },
      "content": {
        "content-type": "text/html",
        "value": "<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/health\"></a>\n<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/wrists\"></a>\n<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/fibromyalgia\"></a>\n<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/music\"></a>\n\n                \n                \n                \n                    <p>So, Seattle’s been basically shut down for most of the past, oh, week and change, thanks to the snow. People did overreact to the news of the snow (did they really need to stock up with a month’s worth of <a href=\"https://www.youtube.com/watch?v=i6zaVYWLTkU\">bread and milk</a>?) but the various shutdowns do otherwise make sense; Seattle is very hilly and when it snows it gets icy and slippery. And some caution does make sense for having a nonperishable food supply, since power outages are a thing. The really remarkable thing is just <em>how much</em> snow we’ve gotten this year; most years we’ll get none or just a light dusting, or maybe we’ll get one or two snow days when it gets especially bad.</p>\n<p>But anyway. Despite the shutdowns, my doctor’s office was still open today (thankfully, although unsurprisingly as they have an urgent care clinic so they make plans to stay open as much as possible). So I was able to do my appointment where I finally got to deal with my various medications for fibromyalgia (as well as finally getting a new prescription of estradiol).</p>\n                \n                \n                \n\n                \n                \n                \n<p>In the interim I had tried daily doses of naproxen, but it didn’t help with the pain and it made for some pretty unpleasant side effects which cleared up as soon as I discontinued it. So my doctor recommended I not do the time-release NSAID course of action.</p>\n<p>For now we’re trying low-dose <a href=\"https://en.wikipedia.org/wiki/Nortriptyline\">nortriptyline</a>, which apparently works pretty well on nerve pain, and also acts very well as a sedative which also helps with the fatigue and sleep disturbance side of things. I like things that have multiple effects. I took it about 20 minutes ago and I’m already feeling it start to kick in, although that might be psychosomatic.</p>\n<p>My big concern is it causing a bunch more drowsiness throughout the day (which is common), but fortunately tomorrow is yet another snow day (because today it snowed yet again) so I don’t have anywhere to be, at least. It’ll be interesting to see how quickly this has an effect and what that effect might be.</p>\n<p>Also, having the snow days has made for some nice relaxing days of me just working on my own games and music. Although I haven’t really worked on much. I have been <a href=\"http://twitch.tv/fluffycritter\">streaming</a> a bunch and having a lot of fun doing mostly synth experiments and piano improv, and I’ve come up with a bunch of cute tunes that I want to develop further. Fortunately I kept local recordings of everything too. It’s been fun getting back in the “sit at a piano and see what comes out” mode, which I used to do a lot but haven’t kept up for Reasons.</p>\n<p>A few days ago I did get my <a href=\"http://itch.io/jam/strawberry-jam-3\" title=\"link is NSFW\">Strawberry Jam 3</a> (NSFW-ish link) code to the point where I can start writing the actual game part but I sort of have lost interest in it for some reason. Maybe because I thought about it so much over the last few weeks that the novelty of it is gone and I don’t really care about the game itself anymore? Oh well, maybe I’ll get something working anyway. I was planning on it only being a few days' worth of effort and I’ve only put in, like, one, so hopefully I get a second wind at some point.</p>\n<p>I am completely unsurprised that as of late, my webmentions have been getting spammed. Well, that protocol sure lasted about as long as I was expecting it to. Fortunately <a href=\"http://webmention.io\">my endpoint</a> has some reasonable blocklist functionality and Aaron is working on handling spam better. It’s aggravating that this is still a thing though. But spammers gonna spam, I guess.</p>\n<p>I kinda wish there were an approval-based mode for it, which trackback and pingback both eventually got in their various endpoint implementations (so you’d think that would have happened from the beginning on this third attempt at doing literally the same thing), but oh well. That’s down to the endpoint and endpoints will get better. And at least in my particular implementation, spam doesn’t actually do anything bad aside from show some extra little buttons that nobody will ever click on anyway (like it doesn’t contribute to pagerank or whatever).</p>\n<p>(Hm, on that note, I <em>should</em> add <code>rel=nofollow</code> to the script anyway, just in case, not that it matters in this case, but the way the web is going I bet search engines are gonna start having to process Javascript to browse anything because of this hideous proliferation of websites that build up the DOM in JS instead of just letting the browser <em>do what browsers do best</em> but that’s a rant I’ve had <a href=\"https://dev.to/fluffy/comment/8k9o\">too many times</a> in other venues lately so I’m just gonna stop it right there.)</p>\n<p>Anyway, my pain had been doing a lot better lately not only because of the lack of too much work but also because I’m finally getting some adjustments in my workspace at work and am also generally feeling way less pressure recently, which helps a lot. And I’ve also been feeling a lot more support from my friends and family, and having had the fibromyalgia diagnosis has made it easier for me to be kind to myself when I’m not doing great, so when I’m not doing great I don’t spiral as badly. It also has meant that I don’t feel so bad about skipping various social obligations when I’m not feeling great, and reserving my spoons for when I <em>want</em> to do it, rather than when I feel like I <em>should</em> do it.</p>\n<p>As part of the Snowpocalypse I’ve been taking <a href=\"https://twitter.com/fluffy/status/1094376405847072770\">time-lapse video</a> out my dining room window, and this makes me want to add proper video support to Publ. I’m trying not to go off the deep end with how to support it correctly, but part of it absoolutely would require finally rewriting Lightbox too, and ther’s so many things I want that to do better anyway and I really don’t want to go overboard there so I dunno what I’ll end up doing. Mostly I want my videos to appear as part of the thumbnail part and come to think of it I guess I could handle all of that in the lightbox side of things, by having it detect links to video providers and turn it into a video embed or something.</p>\n<p>I mean I have ideas about how to make self-hosting the videos work well too but for now I continue to be fine with outsourcing things like that.</p>\n<p>Anyway it’s now been 45 minutes since I took the first dose and I’m definitely feeling it for actual reals, and it’s kind of straaaange. Like a vague itchiness all over, including in my brain? Well, I guess that’s a sign I should go to bed soon.</p>",
        "html": "<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/health\"></a>\n<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/wrists\"></a>\n<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/fibromyalgia\"></a>\n<a class=\"u-syndication\" href=\"https://indieweb.xyz/en/music\"></a>\n\n                \n                \n                \n                    <p>So, Seattle’s been basically shut down for most of the past, oh, week and change, thanks to the snow. People did overreact to the news of the snow (did they really need to stock up with a month’s worth of <a href=\"https://www.youtube.com/watch?v=i6zaVYWLTkU\">bread and milk</a>?) but the various shutdowns do otherwise make sense; Seattle is very hilly and when it snows it gets icy and slippery. And some caution does make sense for having a nonperishable food supply, since power outages are a thing. The really remarkable thing is just <em>how much</em> snow we’ve gotten this year; most years we’ll get none or just a light dusting, or maybe we’ll get one or two snow days when it gets especially bad.</p>\n<p>But anyway. Despite the shutdowns, my doctor’s office was still open today (thankfully, although unsurprisingly as they have an urgent care clinic so they make plans to stay open as much as possible). So I was able to do my appointment where I finally got to deal with my various medications for fibromyalgia (as well as finally getting a new prescription of estradiol).</p>\n                \n                \n                \n\n                \n                \n                \n<p>In the interim I had tried daily doses of naproxen, but it didn’t help with the pain and it made for some pretty unpleasant side effects which cleared up as soon as I discontinued it. So my doctor recommended I not do the time-release NSAID course of action.</p>\n<p>For now we’re trying low-dose <a href=\"https://en.wikipedia.org/wiki/Nortriptyline\">nortriptyline</a>, which apparently works pretty well on nerve pain, and also acts very well as a sedative which also helps with the fatigue and sleep disturbance side of things. I like things that have multiple effects. I took it about 20 minutes ago and I’m already feeling it start to kick in, although that might be psychosomatic.</p>\n<p>My big concern is it causing a bunch more drowsiness throughout the day (which is common), but fortunately tomorrow is yet another snow day (because today it snowed yet again) so I don’t have anywhere to be, at least. It’ll be interesting to see how quickly this has an effect and what that effect might be.</p>\n<p>Also, having the snow days has made for some nice relaxing days of me just working on my own games and music. Although I haven’t really worked on much. I have been <a href=\"http://twitch.tv/fluffycritter\">streaming</a> a bunch and having a lot of fun doing mostly synth experiments and piano improv, and I’ve come up with a bunch of cute tunes that I want to develop further. Fortunately I kept local recordings of everything too. It’s been fun getting back in the “sit at a piano and see what comes out” mode, which I used to do a lot but haven’t kept up for Reasons.</p>\n<p>A few days ago I did get my <a href=\"http://itch.io/jam/strawberry-jam-3\" title=\"link is NSFW\">Strawberry Jam 3</a> (NSFW-ish link) code to the point where I can start writing the actual game part but I sort of have lost interest in it for some reason. Maybe because I thought about it so much over the last few weeks that the novelty of it is gone and I don’t really care about the game itself anymore? Oh well, maybe I’ll get something working anyway. I was planning on it only being a few days' worth of effort and I’ve only put in, like, one, so hopefully I get a second wind at some point.</p>\n<p>I am completely unsurprised that as of late, my webmentions have been getting spammed. Well, that protocol sure lasted about as long as I was expecting it to. Fortunately <a href=\"http://webmention.io\">my endpoint</a> has some reasonable blocklist functionality and Aaron is working on handling spam better. It’s aggravating that this is still a thing though. But spammers gonna spam, I guess.</p>\n<p>I kinda wish there were an approval-based mode for it, which trackback and pingback both eventually got in their various endpoint implementations (so you’d think that would have happened from the beginning on this third attempt at doing literally the same thing), but oh well. That’s down to the endpoint and endpoints will get better. And at least in my particular implementation, spam doesn’t actually do anything bad aside from show some extra little buttons that nobody will ever click on anyway (like it doesn’t contribute to pagerank or whatever).</p>\n<p>(Hm, on that note, I <em>should</em> add <code>rel=nofollow</code> to the script anyway, just in case, not that it matters in this case, but the way the web is going I bet search engines are gonna start having to process Javascript to browse anything because of this hideous proliferation of websites that build up the DOM in JS instead of just letting the browser <em>do what browsers do best</em> but that’s a rant I’ve had <a href=\"https://dev.to/fluffy/comment/8k9o\">too many times</a> in other venues lately so I’m just gonna stop it right there.)</p>\n<p>Anyway, my pain had been doing a lot better lately not only because of the lack of too much work but also because I’m finally getting some adjustments in my workspace at work and am also generally feeling way less pressure recently, which helps a lot. And I’ve also been feeling a lot more support from my friends and family, and having had the fibromyalgia diagnosis has made it easier for me to be kind to myself when I’m not doing great, so when I’m not doing great I don’t spiral as badly. It also has meant that I don’t feel so bad about skipping various social obligations when I’m not feeling great, and reserving my spoons for when I <em>want</em> to do it, rather than when I feel like I <em>should</em> do it.</p>\n<p>As part of the Snowpocalypse I’ve been taking <a href=\"https://twitter.com/fluffy/status/1094376405847072770\">time-lapse video</a> out my dining room window, and this makes me want to add proper video support to Publ. I’m trying not to go off the deep end with how to support it correctly, but part of it absoolutely would require finally rewriting Lightbox too, and ther’s so many things I want that to do better anyway and I really don’t want to go overboard there so I dunno what I’ll end up doing. Mostly I want my videos to appear as part of the thumbnail part and come to think of it I guess I could handle all of that in the lightbox side of things, by having it detect links to video providers and turn it into a video embed or something.</p>\n<p>I mean I have ideas about how to make self-hosting the videos work well too but for now I continue to be fine with outsourcing things like that.</p>\n<p>Anyway it’s now been 45 minutes since I took the first dose and I’m definitely feeling it for actual reals, and it’s kind of straaaange. Like a vague itchiness all over, including in my brain? Well, I guess that’s a sign I should go to bed soon.</p>",
        "text": "So, Seattle’s been basically shut down for most of the past, oh, week and change, thanks to the snow. People did overreact to the news of the snow (did they really need to stock up with a month’s worth of bread and milk?) but the various shutdowns do otherwise make sense; Seattle is very hilly and when it snows it gets icy and slippery. And some caution does make sense for having a nonperishable food supply, since power outages are a thing. The really remarkable thing is just how much snow we’ve gotten this year; most years we’ll get none or just a light dusting, or maybe we’ll get one or two snow days when it gets especially bad.\nBut anyway. Despite the shutdowns, my doctor’s office was still open today (thankfully, although unsurprisingly as they have an urgent care clinic so they make plans to stay open as much as possible). So I was able to do my appointment where I finally got to deal with my various medications for fibromyalgia (as well as finally getting a new prescription of estradiol).\n                \n                \n                \n\n                \n                \n                \nIn the interim I had tried daily doses of naproxen, but it didn’t help with the pain and it made for some pretty unpleasant side effects which cleared up as soon as I discontinued it. So my doctor recommended I not do the time-release NSAID course of action.\nFor now we’re trying low-dose nortriptyline, which apparently works pretty well on nerve pain, and also acts very well as a sedative which also helps with the fatigue and sleep disturbance side of things. I like things that have multiple effects. I took it about 20 minutes ago and I’m already feeling it start to kick in, although that might be psychosomatic.\nMy big concern is it causing a bunch more drowsiness throughout the day (which is common), but fortunately tomorrow is yet another snow day (because today it snowed yet again) so I don’t have anywhere to be, at least. It’ll be interesting to see how quickly this has an effect and what that effect might be.\nAlso, having the snow days has made for some nice relaxing days of me just working on my own games and music. Although I haven’t really worked on much. I have been streaming a bunch and having a lot of fun doing mostly synth experiments and piano improv, and I’ve come up with a bunch of cute tunes that I want to develop further. Fortunately I kept local recordings of everything too. It’s been fun getting back in the “sit at a piano and see what comes out” mode, which I used to do a lot but haven’t kept up for Reasons.\nA few days ago I did get my Strawberry Jam 3 (NSFW-ish link) code to the point where I can start writing the actual game part but I sort of have lost interest in it for some reason. Maybe because I thought about it so much over the last few weeks that the novelty of it is gone and I don’t really care about the game itself anymore? Oh well, maybe I’ll get something working anyway. I was planning on it only being a few days' worth of effort and I’ve only put in, like, one, so hopefully I get a second wind at some point.\nI am completely unsurprised that as of late, my webmentions have been getting spammed. Well, that protocol sure lasted about as long as I was expecting it to. Fortunately my endpoint has some reasonable blocklist functionality and Aaron is working on handling spam better. It’s aggravating that this is still a thing though. But spammers gonna spam, I guess.\nI kinda wish there were an approval-based mode for it, which trackback and pingback both eventually got in their various endpoint implementations (so you’d think that would have happened from the beginning on this third attempt at doing literally the same thing), but oh well. That’s down to the endpoint and endpoints will get better. And at least in my particular implementation, spam doesn’t actually do anything bad aside from show some extra little buttons that nobody will ever click on anyway (like it doesn’t contribute to pagerank or whatever).\n(Hm, on that note, I should add rel=nofollow to the script anyway, just in case, not that it matters in this case, but the way the web is going I bet search engines are gonna start having to process Javascript to browse anything because of this hideous proliferation of websites that build up the DOM in JS instead of just letting the browser do what browsers do best but that’s a rant I’ve had too many times in other venues lately so I’m just gonna stop it right there.)\nAnyway, my pain had been doing a lot better lately not only because of the lack of too much work but also because I’m finally getting some adjustments in my workspace at work and am also generally feeling way less pressure recently, which helps a lot. And I’ve also been feeling a lot more support from my friends and family, and having had the fibromyalgia diagnosis has made it easier for me to be kind to myself when I’m not doing great, so when I’m not doing great I don’t spiral as badly. It also has meant that I don’t feel so bad about skipping various social obligations when I’m not feeling great, and reserving my spoons for when I want to do it, rather than when I feel like I should do it.\nAs part of the Snowpocalypse I’ve been taking time-lapse video out my dining room window, and this makes me want to add proper video support to Publ. I’m trying not to go off the deep end with how to support it correctly, but part of it absoolutely would require finally rewriting Lightbox too, and ther’s so many things I want that to do better anyway and I really don’t want to go overboard there so I dunno what I’ll end up doing. Mostly I want my videos to appear as part of the thumbnail part and come to think of it I guess I could handle all of that in the lightbox side of things, by having it detect links to video providers and turn it into a video embed or something.\nI mean I have ideas about how to make self-hosting the videos work well too but for now I continue to be fine with outsourcing things like that.\nAnyway it’s now been 45 minutes since I took the first dose and I’m definitely feeling it for actual reals, and it’s kind of straaaange. Like a vague itchiness all over, including in my brain? Well, I guess that’s a sign I should go to bed soon."
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "fluffy",
        "photo": "https://webmention.io/avatar/beesbuzz.biz/d7437fcddfe476ea3ac89d5355ca01e8fac4a4cc089b78ac2db785e64164bc59.jpg",
        "url": "https://beesbuzz.biz/"
      },
      "url": "https://beesbuzz.biz/blog/3743-More-fun-with-Webmentions",
      "published": "2018-12-19T23:53:28-08:00",
      "wm-received": "2019-08-21T19:46:00Z",
      "wm-id": 672699,
      "wm-source": "https://beesbuzz.biz/blog/3743-More-fun-with-Webmentions",
      "wm-target": "http://webmention.io",
      "name": "More fun with Webmentions",
      "summary": {
        "content-type": "text/plain",
        "value": "I ended up writing a little embed widget to embed webmention responses/reactions into my blog posts. It all happens client-side, but so do Disqus comments so I figure that's okay."
      },
      "content": {
        "content-type": "text/html",
        "value": "<p>I ended up writing a <a href=\"https://beesbuzz.biz/static/webmention.js\">little embed widget</a> to embed webmention responses/reactions into my blog posts. It all happens client-side, but so do Disqus comments so I figure that’s okay.</p>\n<p>It only works with <a href=\"http://webmention.io\">webmention.io</a> as the webmention endpoint (although it could be modified to work with any endpoint that speaks the same query API), and I suspect <a href=\"https://aaronparecki.com\">Aaron</a> might end up being a skosh annoyed with how I actually implemented it, but whatever. :)</p>\n<p><del>Anyway, if you find any bugs with it or want to make improvements, for now you can submit an issue against the <a href=\"http://github.com/PlaidWeb/Publ-site\">Publ website repository</a> or you can just, like, comment here or something.</del> Update, 7/9/2019 I have moved this into <a href=\"https://github.com/PlaidWeb/webmention.js\">its own GitHub repository</a>.</p>",
        "html": "<p>I ended up writing a <a href=\"https://beesbuzz.biz/static/webmention.js\">little embed widget</a> to embed webmention responses/reactions into my blog posts. It all happens client-side, but so do Disqus comments so I figure that’s okay.</p>\n<p>It only works with <a href=\"http://webmention.io\">webmention.io</a> as the webmention endpoint (although it could be modified to work with any endpoint that speaks the same query API), and I suspect <a href=\"https://aaronparecki.com\">Aaron</a> might end up being a skosh annoyed with how I actually implemented it, but whatever. :)</p>\n<p><del>Anyway, if you find any bugs with it or want to make improvements, for now you can submit an issue against the <a href=\"http://github.com/PlaidWeb/Publ-site\">Publ website repository</a> or you can just, like, comment here or something.</del> Update, 7/9/2019 I have moved this into <a href=\"https://github.com/PlaidWeb/webmention.js\">its own GitHub repository</a>.</p>",
        "text": "I ended up writing a little embed widget to embed webmention responses/reactions into my blog posts. It all happens client-side, but so do Disqus comments so I figure that’s okay.\nIt only works with webmention.io as the webmention endpoint (although it could be modified to work with any endpoint that speaks the same query API), and I suspect Aaron might end up being a skosh annoyed with how I actually implemented it, but whatever. :)\nAnyway, if you find any bugs with it or want to make improvements, for now you can submit an issue against the Publ website repository or you can just, like, comment here or something. Update, 7/9/2019 I have moved this into its own GitHub repository."
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "http://www.kevinmarks.com/hwc2018-01-24.html",
      "published": "2018-01-24T00:00:00",
      "wm-received": "2018-11-06T02:41:05Z",
      "wm-id": 561536,
      "wm-source": "http://www.kevinmarks.com/hwc2018-01-24.html",
      "wm-target": "http://webmention.io",
      "name": "Homebrew Website Club London 2018-01-24",
      "syndication": [
        "https://news.indieweb.org/en"
      ],
      "content": {
        "content-type": "text/html",
        "value": "<a class=\"h-card p-category\" href=\"https://calumryan.com\">Calum Ryan</a>:  <blockquote class=\"e-content\">\n<p>Welcome to Homebrew website club - my website is <a href=\"https://calumryan.com\">https://calumryan.com</a> - I started working on it 5 years ago\n</p>\n<p>the most recent change I have made to it is to use CSS Grid for it, which is more cosmetic\n</p>\n<p>My site supports webmentions, and is hooked up to <a href=\"http://brid.gy\">brid.gy</a> for twitter and facebook replies too. I was the first person to post weather status\n</p>\n<p>I post checkins to my site and syndicate them out\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://letorey.co.uk/\">Dave Letorey</a>:  <blockquote class=\"e-content\">\n<p>I'm Dave - I only just built a personal website at <a href=\"https://letorey.co.uk/\">https://letorey.co.uk/</a> - it has not much design at the moment, but the most important part is the content not the way it looks\n</p>\n<p>as we go into the future wiht screen readers and voice UI how it looks matters less, so rather than worrying about looks I just made a simple grid layout \n</p>\n<p>I don't have any javascript - just simple CSS - the whole point is to learn, and docusmetn what I am doing\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://chrisburnell.com\">Chris Burnell</a>:  <blockquote class=\"e-content\">\n<p>I'm Chris - I use my website for testing mainly - I went the other way round and obsessed with how it looked\n</p>\n<p>this year is the year of writing content. I am using <a href=\"http://webmention.io\">webmention.io</a> at the moment - I'd like to add a micropub endpoiny\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"http://kevinmarks.com\">Kevin Marks</a>:  <blockquote class=\"e-content\">\n<p>my website is <a href=\"http://kevinmarks.com\">kevinmarks.com</a> but I have been experimenting with the Beaker browser and Fritter\n</p>\n<p>so my website is also available at <a>dat://b7930c5e0d55aee8aeb6fa996c8e782e2e9b99b62bf25cab0be7ae195f56a158</a>\n</p>\n<p>in other news, we are celebrating one million webmentions <a href=\"https://snarfed.org/1-million-webmentions\">https://snarfed.org/1-million-webmentions</a> - and <a class=\"h-x-username\" href=\"https://twitter.com/calumn_ryan\">@calumn_ryan</a> brought cupcakes\n</p>\n<p>More news this week - WebSub (formerly known as PubSubHubbub) is a w3c REC and IndieAuth is a w3c NOTE <a href=\"https://aaronparecki.com/2018/01/23/34/w3c-websub-indieauth\">https://aaronparecki.com/2018/01/23/34/w3c-websub-indieauth</a>\n</p>\n<p>the beaker browser is at <a href=\"https://beakerbrowser.com/\">https://beakerbrowser.com/</a> and Fritter is at <a href=\"https://github.com/beakerbrowser/fritter\">https://github.com/beakerbrowser/fritter</a>\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://calumryan.com\">Calum Ryan</a>:  <blockquote class=\"e-content\"><p>to make your website more indieweb friendly, go to <a href=\"http://indiewebify.me\">indiewebify.me</a> and try the tools there to see if you have it marked up well\n</p></blockquote>\n\n\n<a class=\"h-card p-category\" href=\"http://kevinmarks.com\">Kevin Marks</a>:  <blockquote class=\"e-content\"><p><a class=\"h-x-username\" href=\"https://twitter.com/calum_ryan\">@calum_ryan</a> is walking <a class=\"h-x-username\" href=\"https://twitter.com/dletorey\">@dletorey</a> and <a class=\"h-x-username\" href=\"https://twitter.com/iamchrisburnell\">@iamchrisburnell</a> through <a href=\"http://indiewebify.me\">indiewebify.me</a>  -they're signed into the <a href=\"http://indieweb.org\">indieweb.org</a> wiki\n</p></blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://calumryan.com\">Calum Ryan</a>:  <blockquote class=\"e-content\"><p>I'm working on <a href=\"https://indiewebguides.org/\">https://indiewebguides.org/</a> which is based on the <a href=\"http://indieweb.org\">indieweb.org</a> wiki, but focused on less technical users of the web\n</p></blockquote>\n\n\n<a class=\"h-card p-category\" href=\"http://kevinmarks.com\">Kevin Marks</a>:  <blockquote class=\"e-content\">\n<p>an editorial on the advantages of #indieweb from <a class=\"h-x-username\" href=\"https://twitter.com/godaddy\">@godaddy</a> <a href=\"https://www.godaddy.com/garage/indieweb-facebook-opportunities/\">https://www.godaddy.com/garage/indieweb-facebook-opportunities/</a>\n</p>\n<p>a progressive web app generator that is a PWA itself: <a href=\"https://joreteg.com/blog/pwa-spawns-pwas\">https://joreteg.com/blog/pwa-spawns-pwas</a>\n</p>\n</blockquote>",
        "html": "<a class=\"h-card p-category\" href=\"https://calumryan.com\">Calum Ryan</a>:  <blockquote class=\"e-content\">\n<p>Welcome to Homebrew website club - my website is <a href=\"https://calumryan.com\">https://calumryan.com</a> - I started working on it 5 years ago\n</p>\n<p>the most recent change I have made to it is to use CSS Grid for it, which is more cosmetic\n</p>\n<p>My site supports webmentions, and is hooked up to <a href=\"http://brid.gy\">brid.gy</a> for twitter and facebook replies too. I was the first person to post weather status\n</p>\n<p>I post checkins to my site and syndicate them out\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://letorey.co.uk/\">Dave Letorey</a>:  <blockquote class=\"e-content\">\n<p>I'm Dave - I only just built a personal website at <a href=\"https://letorey.co.uk/\">https://letorey.co.uk/</a> - it has not much design at the moment, but the most important part is the content not the way it looks\n</p>\n<p>as we go into the future wiht screen readers and voice UI how it looks matters less, so rather than worrying about looks I just made a simple grid layout \n</p>\n<p>I don't have any javascript - just simple CSS - the whole point is to learn, and docusmetn what I am doing\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://chrisburnell.com\">Chris Burnell</a>:  <blockquote class=\"e-content\">\n<p>I'm Chris - I use my website for testing mainly - I went the other way round and obsessed with how it looked\n</p>\n<p>this year is the year of writing content. I am using <a href=\"http://webmention.io\">webmention.io</a> at the moment - I'd like to add a micropub endpoiny\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"http://kevinmarks.com\">Kevin Marks</a>:  <blockquote class=\"e-content\">\n<p>my website is <a href=\"http://kevinmarks.com\">kevinmarks.com</a> but I have been experimenting with the Beaker browser and Fritter\n</p>\n<p>so my website is also available at <a>dat://b7930c5e0d55aee8aeb6fa996c8e782e2e9b99b62bf25cab0be7ae195f56a158</a>\n</p>\n<p>in other news, we are celebrating one million webmentions <a href=\"https://snarfed.org/1-million-webmentions\">https://snarfed.org/1-million-webmentions</a> - and <a class=\"h-x-username\" href=\"https://twitter.com/calumn_ryan\">@calumn_ryan</a> brought cupcakes\n</p>\n<p>More news this week - WebSub (formerly known as PubSubHubbub) is a w3c REC and IndieAuth is a w3c NOTE <a href=\"https://aaronparecki.com/2018/01/23/34/w3c-websub-indieauth\">https://aaronparecki.com/2018/01/23/34/w3c-websub-indieauth</a>\n</p>\n<p>the beaker browser is at <a href=\"https://beakerbrowser.com/\">https://beakerbrowser.com/</a> and Fritter is at <a href=\"https://github.com/beakerbrowser/fritter\">https://github.com/beakerbrowser/fritter</a>\n</p>\n</blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://calumryan.com\">Calum Ryan</a>:  <blockquote class=\"e-content\"><p>to make your website more indieweb friendly, go to <a href=\"http://indiewebify.me\">indiewebify.me</a> and try the tools there to see if you have it marked up well\n</p></blockquote>\n\n\n<a class=\"h-card p-category\" href=\"http://kevinmarks.com\">Kevin Marks</a>:  <blockquote class=\"e-content\"><p><a class=\"h-x-username\" href=\"https://twitter.com/calum_ryan\">@calum_ryan</a> is walking <a class=\"h-x-username\" href=\"https://twitter.com/dletorey\">@dletorey</a> and <a class=\"h-x-username\" href=\"https://twitter.com/iamchrisburnell\">@iamchrisburnell</a> through <a href=\"http://indiewebify.me\">indiewebify.me</a>  -they're signed into the <a href=\"http://indieweb.org\">indieweb.org</a> wiki\n</p></blockquote>\n\n\n<a class=\"h-card p-category\" href=\"https://calumryan.com\">Calum Ryan</a>:  <blockquote class=\"e-content\"><p>I'm working on <a href=\"https://indiewebguides.org/\">https://indiewebguides.org/</a> which is based on the <a href=\"http://indieweb.org\">indieweb.org</a> wiki, but focused on less technical users of the web\n</p></blockquote>\n\n\n<a class=\"h-card p-category\" href=\"http://kevinmarks.com\">Kevin Marks</a>:  <blockquote class=\"e-content\">\n<p>an editorial on the advantages of #indieweb from <a class=\"h-x-username\" href=\"https://twitter.com/godaddy\">@godaddy</a> <a href=\"https://www.godaddy.com/garage/indieweb-facebook-opportunities/\">https://www.godaddy.com/garage/indieweb-facebook-opportunities/</a>\n</p>\n<p>a progressive web app generator that is a PWA itself: <a href=\"https://joreteg.com/blog/pwa-spawns-pwas\">https://joreteg.com/blog/pwa-spawns-pwas</a>\n</p>\n</blockquote>",
        "text": "Calum Ryan:  \nWelcome to Homebrew website club - my website is https://calumryan.com - I started working on it 5 years ago\n\nthe most recent change I have made to it is to use CSS Grid for it, which is more cosmetic\n\nMy site supports webmentions, and is hooked up to brid.gy for twitter and facebook replies too. I was the first person to post weather status\n\nI post checkins to my site and syndicate them out\n\n\n\n\nDave Letorey:  \nI'm Dave - I only just built a personal website at https://letorey.co.uk/ - it has not much design at the moment, but the most important part is the content not the way it looks\n\nas we go into the future wiht screen readers and voice UI how it looks matters less, so rather than worrying about looks I just made a simple grid layout \n\nI don't have any javascript - just simple CSS - the whole point is to learn, and docusmetn what I am doing\n\n\n\n\nChris Burnell:  \nI'm Chris - I use my website for testing mainly - I went the other way round and obsessed with how it looked\n\nthis year is the year of writing content. I am using webmention.io at the moment - I'd like to add a micropub endpoiny\n\n\n\n\nKevin Marks:  \nmy website is kevinmarks.com but I have been experimenting with the Beaker browser and Fritter\n\nso my website is also available at dat://b7930c5e0d55aee8aeb6fa996c8e782e2e9b99b62bf25cab0be7ae195f56a158\n\nin other news, we are celebrating one million webmentions https://snarfed.org/1-million-webmentions - and @calumn_ryan brought cupcakes\n\nMore news this week - WebSub (formerly known as PubSubHubbub) is a w3c REC and IndieAuth is a w3c NOTE https://aaronparecki.com/2018/01/23/34/w3c-websub-indieauth\n\nthe beaker browser is at https://beakerbrowser.com/ and Fritter is at https://github.com/beakerbrowser/fritter\n\n\n\n\nCalum Ryan:  to make your website more indieweb friendly, go to indiewebify.me and try the tools there to see if you have it marked up well\n\n\n\nKevin Marks:  @calum_ryan is walking @dletorey and @iamchrisburnell through indiewebify.me  -they're signed into the indieweb.org wiki\n\n\n\nCalum Ryan:  I'm working on https://indiewebguides.org/ which is based on the indieweb.org wiki, but focused on less technical users of the web\n\n\n\nKevin Marks:  \nan editorial on the advantages of #indieweb from @godaddy https://www.godaddy.com/garage/indieweb-facebook-opportunities/\n\na progressive web app generator that is a PWA itself: https://joreteg.com/blog/pwa-spawns-pwas"
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "fluffy",
        "photo": "https://webmention.io/avatar/beesbuzz.biz/d1211c089153063df0b851256b8d1568fca794e1f65b8e83721ad1a01acf543a.jpg",
        "url": "http://beesbuzz.biz/"
      },
      "url": "http://beesbuzz.biz/blog/6283-Just-thought-I-should-Web-Mention",
      "published": "2018-09-28T14:17:43-07:00",
      "wm-received": "2018-10-10T00:54:59Z",
      "wm-id": 554636,
      "wm-source": "http://beesbuzz.biz/blog/6283-Just-thought-I-should-Web-Mention",
      "wm-target": "http://webmention.io",
      "name": "Just thought I should (Web)Mention…",
      "summary": {
        "content-type": "text/plain",
        "value": "I’ve been building Publ with IndieWeb principles in mind. One of the things I’m playing with right now is adding in very basic support for WebMention."
      },
      "content": {
        "content-type": "text/html",
        "value": "<p>I’ve been building <a href=\"http://publ.beesbuzz.biz\">Publ</a> with <a href=\"https://indieweb.org\">IndieWeb</a> principles in mind. One of the things I’m playing with right now is adding in <a href=\"https://github.com/fluffy-critter/Publ/issues/128\">very basic support for WebMention</a>.</p>\n                \n                \n                \n\n                \n\n\n    <p>There’s a few different ways to go about doing it. For now, on my own sites I’m just using <a href=\"http://webmention.io\">webmention.io</a> as a third-party endpoint, because that’s easy enough for me to set up, and I don’t want to be in a position of adding a greater setup/support burden to the average theoretical Publ user who just wants to get a website up and running. I will certainly add this into any documentation improvments for the <a href=\"http://publ.beesbuzz.biz/getting-started\">getting started guide</a>, of course. Basically I think people should be able to use whatever WebMention endpoint that they want, just as people can use whatever external comment system they want (Disqus, IntenseDebate, etc.). There’s also an interesting <a href=\"https://webmention.herokuapp.com\">Disqus-like WebMention broker</a> that is currently in very early development and lets you simply embed an externally-hosted Javascript-included WebMention feed onto your page; unfortunately it’s not open to the general public just yet but it’s definitely one to keep an eye on.</p>\n<p>I’m not sure if I’d want it to completely replace Disqus though; I can easily go both ways on that sort of thing. And in the meantime, there’s also <a href=\"http://brid.gy\">Bridgy</a> which will forward WebMention stuff on to Disqus, which I might end up setting up as well. (That also has the dubious benefit of pulling in twitter-based responses among other things as well.)</p>\n<p>As far as <em>sending</em> WebMention goes, that side of things looks a lot simpler, and I already have a basic plan forward, although that will definitely require writing code. Also at the moment the plan forward means also re-sending the mentions out every time an item gets re-indexed, and on Heroku deployments in particular that will get <em>quite spammy</em>. I’m thinking that for that stuff it might be okay to recommend an optional configuration of having a persistent database for outgoing WebMentions; fortunately that’s not a thing that will be subject to schema changes since all it really needs to track is:</p>\n<ul>\n<li>The entry ID</li>\n<li>The outgoing URL</li>\n<li>Whether it’s been sent successfully (or a general status code I guess)</li>\n<li>When the mention was most recently attempted</li>\n</ul>\n<p>I’m not really clear on what the intention is supposed to be yet on re-sending mentions; like, once a mention gets sent successfully, can we assume that the mention will always be remembered down the road and should never be re-sent? Is it okay to re-send mentions and assume that the recipient will automatically filter out duplicates? What happens as a blog grows to a few thousand entries, and links to blogs that don’t support WebMentions originally but later we want to try re-sending retroactive mentions in case a site has gained that ability? And so on.</p>\n<p>Or maybe the outgoing mentions should be done as a log? Like, we just look at the most recent <code>&lt;source,target&gt;</code> pair that matches, and if the code was a failure and was more than, say, a week ago, we try again?</p>\n<p>Update: Per <a href=\"https://www.w3.org/TR/webmention/#updating-existing-webmentions\">the spec</a> it seems that the expectation is that any time an entry updates for whatever reason it should re-send all its pings. Well, I guess that means I’m not going to worry about persisting information about pings that have been sent (although obviously I’ll de-dupe them on each update).</p>\n<p>Anyway, one neat thing I learned about from webmention.io is an emerging cross-site authentication mechanism via <a href=\"https://indieauth.com\">IndieAuth</a>, which seems to be a really nice way of supporting OAuth without requiring a crapton of OAuth endpoints! I think that gives me a mechanism for going forward on my long-planned-but-never-quite-thought-out friends-only/ACL stuff. (Although that also requires some thought when it comes to persistence. Gahhhhh persistence keeps on rearing its ugly head….)</p>\n<p>Well, whatever. This seems to be a great time to be developing software along these principles that I’ve always held, and it’s great seeing this critical mass forming around these things I’ve been espousing on and off since 2001 or so.</p>\n<p>(Now if only I had the spoons to also develop a heckin' next-gen RSS/Atom reader…)</p>",
        "html": "<p>I’ve been building <a href=\"http://publ.beesbuzz.biz\">Publ</a> with <a href=\"https://indieweb.org\">IndieWeb</a> principles in mind. One of the things I’m playing with right now is adding in <a href=\"https://github.com/fluffy-critter/Publ/issues/128\">very basic support for WebMention</a>.</p>\n                \n                \n                \n\n                \n\n\n    <p>There’s a few different ways to go about doing it. For now, on my own sites I’m just using <a href=\"http://webmention.io\">webmention.io</a> as a third-party endpoint, because that’s easy enough for me to set up, and I don’t want to be in a position of adding a greater setup/support burden to the average theoretical Publ user who just wants to get a website up and running. I will certainly add this into any documentation improvments for the <a href=\"http://publ.beesbuzz.biz/getting-started\">getting started guide</a>, of course. Basically I think people should be able to use whatever WebMention endpoint that they want, just as people can use whatever external comment system they want (Disqus, IntenseDebate, etc.). There’s also an interesting <a href=\"https://webmention.herokuapp.com\">Disqus-like WebMention broker</a> that is currently in very early development and lets you simply embed an externally-hosted Javascript-included WebMention feed onto your page; unfortunately it’s not open to the general public just yet but it’s definitely one to keep an eye on.</p>\n<p>I’m not sure if I’d want it to completely replace Disqus though; I can easily go both ways on that sort of thing. And in the meantime, there’s also <a href=\"http://brid.gy\">Bridgy</a> which will forward WebMention stuff on to Disqus, which I might end up setting up as well. (That also has the dubious benefit of pulling in twitter-based responses among other things as well.)</p>\n<p>As far as <em>sending</em> WebMention goes, that side of things looks a lot simpler, and I already have a basic plan forward, although that will definitely require writing code. Also at the moment the plan forward means also re-sending the mentions out every time an item gets re-indexed, and on Heroku deployments in particular that will get <em>quite spammy</em>. I’m thinking that for that stuff it might be okay to recommend an optional configuration of having a persistent database for outgoing WebMentions; fortunately that’s not a thing that will be subject to schema changes since all it really needs to track is:</p>\n<ul>\n<li>The entry ID</li>\n<li>The outgoing URL</li>\n<li>Whether it’s been sent successfully (or a general status code I guess)</li>\n<li>When the mention was most recently attempted</li>\n</ul>\n<p>I’m not really clear on what the intention is supposed to be yet on re-sending mentions; like, once a mention gets sent successfully, can we assume that the mention will always be remembered down the road and should never be re-sent? Is it okay to re-send mentions and assume that the recipient will automatically filter out duplicates? What happens as a blog grows to a few thousand entries, and links to blogs that don’t support WebMentions originally but later we want to try re-sending retroactive mentions in case a site has gained that ability? And so on.</p>\n<p>Or maybe the outgoing mentions should be done as a log? Like, we just look at the most recent <code>&lt;source,target&gt;</code> pair that matches, and if the code was a failure and was more than, say, a week ago, we try again?</p>\n<p>Update: Per <a href=\"https://www.w3.org/TR/webmention/#updating-existing-webmentions\">the spec</a> it seems that the expectation is that any time an entry updates for whatever reason it should re-send all its pings. Well, I guess that means I’m not going to worry about persisting information about pings that have been sent (although obviously I’ll de-dupe them on each update).</p>\n<p>Anyway, one neat thing I learned about from webmention.io is an emerging cross-site authentication mechanism via <a href=\"https://indieauth.com\">IndieAuth</a>, which seems to be a really nice way of supporting OAuth without requiring a crapton of OAuth endpoints! I think that gives me a mechanism for going forward on my long-planned-but-never-quite-thought-out friends-only/ACL stuff. (Although that also requires some thought when it comes to persistence. Gahhhhh persistence keeps on rearing its ugly head….)</p>\n<p>Well, whatever. This seems to be a great time to be developing software along these principles that I’ve always held, and it’s great seeing this critical mass forming around these things I’ve been espousing on and off since 2001 or so.</p>\n<p>(Now if only I had the spoons to also develop a heckin' next-gen RSS/Atom reader…)</p>",
        "text": "I’ve been building Publ with IndieWeb principles in mind. One of the things I’m playing with right now is adding in very basic support for WebMention.\n                \n                \n                \n\n                \n\n\n    There’s a few different ways to go about doing it. For now, on my own sites I’m just using webmention.io as a third-party endpoint, because that’s easy enough for me to set up, and I don’t want to be in a position of adding a greater setup/support burden to the average theoretical Publ user who just wants to get a website up and running. I will certainly add this into any documentation improvments for the getting started guide, of course. Basically I think people should be able to use whatever WebMention endpoint that they want, just as people can use whatever external comment system they want (Disqus, IntenseDebate, etc.). There’s also an interesting Disqus-like WebMention broker that is currently in very early development and lets you simply embed an externally-hosted Javascript-included WebMention feed onto your page; unfortunately it’s not open to the general public just yet but it’s definitely one to keep an eye on.\nI’m not sure if I’d want it to completely replace Disqus though; I can easily go both ways on that sort of thing. And in the meantime, there’s also Bridgy which will forward WebMention stuff on to Disqus, which I might end up setting up as well. (That also has the dubious benefit of pulling in twitter-based responses among other things as well.)\nAs far as sending WebMention goes, that side of things looks a lot simpler, and I already have a basic plan forward, although that will definitely require writing code. Also at the moment the plan forward means also re-sending the mentions out every time an item gets re-indexed, and on Heroku deployments in particular that will get quite spammy. I’m thinking that for that stuff it might be okay to recommend an optional configuration of having a persistent database for outgoing WebMentions; fortunately that’s not a thing that will be subject to schema changes since all it really needs to track is:\n\nThe entry ID\nThe outgoing URL\nWhether it’s been sent successfully (or a general status code I guess)\nWhen the mention was most recently attempted\n\nI’m not really clear on what the intention is supposed to be yet on re-sending mentions; like, once a mention gets sent successfully, can we assume that the mention will always be remembered down the road and should never be re-sent? Is it okay to re-send mentions and assume that the recipient will automatically filter out duplicates? What happens as a blog grows to a few thousand entries, and links to blogs that don’t support WebMentions originally but later we want to try re-sending retroactive mentions in case a site has gained that ability? And so on.\nOr maybe the outgoing mentions should be done as a log? Like, we just look at the most recent <source,target> pair that matches, and if the code was a failure and was more than, say, a week ago, we try again?\nUpdate: Per the spec it seems that the expectation is that any time an entry updates for whatever reason it should re-send all its pings. Well, I guess that means I’m not going to worry about persisting information about pings that have been sent (although obviously I’ll de-dupe them on each update).\nAnyway, one neat thing I learned about from webmention.io is an emerging cross-site authentication mechanism via IndieAuth, which seems to be a really nice way of supporting OAuth without requiring a crapton of OAuth endpoints! I think that gives me a mechanism for going forward on my long-planned-but-never-quite-thought-out friends-only/ACL stuff. (Although that also requires some thought when it comes to persistence. Gahhhhh persistence keeps on rearing its ugly head….)\nWell, whatever. This seems to be a great time to be developing software along these principles that I’ve always held, and it’s great seeing this critical mass forming around these things I’ve been espousing on and off since 2001 or so.\n(Now if only I had the spoons to also develop a heckin' next-gen RSS/Atom reader…)"
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Jason McIntosh",
        "photo": "https://webmention.io/avatar/jmac.org/4af6ebbfb9755bf19bdb4abbf7462169df13bbdea3d0e3aa263f2334adf9a3e7.png",
        "url": "http://jmac.org"
      },
      "url": "http://fogknife.com/2018-05-07-a-bit-of-indieweb-pushback.html",
      "published": "2018-05-07T09:46:45",
      "wm-received": "2018-05-28T22:48:13Z",
      "wm-id": 523673,
      "wm-source": "http://fogknife.com/2018-05-07-a-bit-of-indieweb-pushback.html",
      "wm-target": "http://webmention.io",
      "name": "A bit of IndieWeb pushback",
      "syndication": [
        "https://news.indieweb.org/en",
        "https://twitter.com/JmacDotOrg/status/993488237166518272"
      ],
      "summary": {
        "content-type": "text/plain",
        "value": "My admittedly somewhat agitative article about IndieWeb received some excellent critique from that community's core constituency."
      },
      "content": {
        "content-type": "text/html",
        "value": "<p><a href=\"http://fogknife.com/2018-05-04-i-believe-in-the-indieweb-it-needs-to-believe-in-itself.html\">My IndieWeb call to action</a> from a few days ago drew down <a href=\"http://fogknife.com/2018-05-04-i-believe-in-the-indieweb-it-needs-to-believe-in-itself.html#webmentions\">a stronger and wider response</a> than this blog’s articles typically receive, and I acknowledge this generous feedback with humility and gratitude.* As I wrote then, I’ve been aware of the IndieWeb movement for only three months, so I now shift my stance towards listening to and reporting this response, rather than pressing my initial point any further.</p>\n\n<p>Other than general words of appreciation (which I appreciate!), the response in both written replies and followup IRC discussion† largely centers around two complementary counterpoints:</p>\n\n<ol>\n<li><p>While the IndieWeb group began its work many years ago, its resultant technologies remain very young — <a href=\"https://www.w3.org/TR/webmention/\">Webmention’s W3C certification</a> dates to early 2017 — and they’re still only taking root in the form of varied and tested implementations. Its exposure to the public grows no faster than strictly necessary. Why rush the process, and risk spoiling things?</p></li>\n<li>\n<p>The core IndieWeb community focuses on development, not public outreach. It falls to second-order groups to organize around these developed principles and technologies, implementing their own project-specific goals. This will carry the welcome side-effect of testing and proving these technologies — and bringing comfortably gradual exposure to them as the basis for successful applications, rather than mere standards and theories.</p>\n\n<p>The world already starts to see this with commercial efforts like <a href=\"https://micro.blog\">Micro.Blog</a>, and the wide-open land invites the invention of more services like it. (I might include non-commercial but stable services like <a href=\"http://brid.gy\">Bridgy</a> and <a href=\"http://webmention.io\">Webmention.io</a> into this class, as well.)</p>\n</li>\n</ol>\n\n<p>I feel it not my present place to vociferously agree or disagree with these points, which do not necessarily conflict with the observations I voiced in my previous article. I will say how impressed I feel that the core community clearly possesses such a strong sense of cohesion, despite a lack of formal organization, to produce these consensus-based counterarguments so efficiently.</p>\n\n<p>And I must admit that they have already inspired me start dreaming up new ways that I might contribute further to IndieWeb on its own apparent terms.</p>\n\n<p><em>This was also posted to <a href=\"https://news.indieweb.org/en\" class=\"u-syndication\">IndieNews</a>.</em></p>\n\n\n\n<p>* It also exercised my <a href=\"http://fogknife.com/2018-04-22-announcing-two-new-indieweb-modules-for-perl.html\">hand-rolled backfeed software</a> to a great degree, with webmentions rolling in from a number of non-Bridgy sources for the first time — not surprising, I suppose, for a post about the IndieWeb itself! — and breaking my young and fragile libraries this way and that. <a href=\"https://github.com/jmacdotorg/microformats2-perl/commits/master\">I wrote many patches</a> very quickly, and for this opportunity, too, I feel humbly grateful.</p>\n\n<p>† Of all the <a href=\"https://freenode.net\">Freenode IRC</a> channels with populations of more than 100 that I’ve spent any time on, the people of #indieweb have proven among the most friendly and welcoming, always quick to answer newcomers’ questions with no trace of mockery, <a href=\"https://jvns.ca/blog/2017/04/27/no-feigning-surprise/\">feigned surprise</a>, or bad taste. This has helped <em>a great deal</em> with my own ever-deepening interest in and respect for IndieWeb’s principles and goals.</p>",
        "html": "<p><a href=\"http://fogknife.com/2018-05-04-i-believe-in-the-indieweb-it-needs-to-believe-in-itself.html\">My IndieWeb call to action</a> from a few days ago drew down <a href=\"http://fogknife.com/2018-05-04-i-believe-in-the-indieweb-it-needs-to-believe-in-itself.html#webmentions\">a stronger and wider response</a> than this blog’s articles typically receive, and I acknowledge this generous feedback with humility and gratitude.* As I wrote then, I’ve been aware of the IndieWeb movement for only three months, so I now shift my stance towards listening to and reporting this response, rather than pressing my initial point any further.</p>\n\n<p>Other than general words of appreciation (which I appreciate!), the response in both written replies and followup IRC discussion† largely centers around two complementary counterpoints:</p>\n\n<ol>\n<li><p>While the IndieWeb group began its work many years ago, its resultant technologies remain very young — <a href=\"https://www.w3.org/TR/webmention/\">Webmention’s W3C certification</a> dates to early 2017 — and they’re still only taking root in the form of varied and tested implementations. Its exposure to the public grows no faster than strictly necessary. Why rush the process, and risk spoiling things?</p></li>\n<li>\n<p>The core IndieWeb community focuses on development, not public outreach. It falls to second-order groups to organize around these developed principles and technologies, implementing their own project-specific goals. This will carry the welcome side-effect of testing and proving these technologies — and bringing comfortably gradual exposure to them as the basis for successful applications, rather than mere standards and theories.</p>\n\n<p>The world already starts to see this with commercial efforts like <a href=\"https://micro.blog\">Micro.Blog</a>, and the wide-open land invites the invention of more services like it. (I might include non-commercial but stable services like <a href=\"http://brid.gy\">Bridgy</a> and <a href=\"http://webmention.io\">Webmention.io</a> into this class, as well.)</p>\n</li>\n</ol>\n\n<p>I feel it not my present place to vociferously agree or disagree with these points, which do not necessarily conflict with the observations I voiced in my previous article. I will say how impressed I feel that the core community clearly possesses such a strong sense of cohesion, despite a lack of formal organization, to produce these consensus-based counterarguments so efficiently.</p>\n\n<p>And I must admit that they have already inspired me start dreaming up new ways that I might contribute further to IndieWeb on its own apparent terms.</p>\n\n<p><em>This was also posted to <a href=\"https://news.indieweb.org/en\" class=\"u-syndication\">IndieNews</a>.</em></p>\n\n\n\n<p>* It also exercised my <a href=\"http://fogknife.com/2018-04-22-announcing-two-new-indieweb-modules-for-perl.html\">hand-rolled backfeed software</a> to a great degree, with webmentions rolling in from a number of non-Bridgy sources for the first time — not surprising, I suppose, for a post about the IndieWeb itself! — and breaking my young and fragile libraries this way and that. <a href=\"https://github.com/jmacdotorg/microformats2-perl/commits/master\">I wrote many patches</a> very quickly, and for this opportunity, too, I feel humbly grateful.</p>\n\n<p>† Of all the <a href=\"https://freenode.net\">Freenode IRC</a> channels with populations of more than 100 that I’ve spent any time on, the people of #indieweb have proven among the most friendly and welcoming, always quick to answer newcomers’ questions with no trace of mockery, <a href=\"https://jvns.ca/blog/2017/04/27/no-feigning-surprise/\">feigned surprise</a>, or bad taste. This has helped <em>a great deal</em> with my own ever-deepening interest in and respect for IndieWeb’s principles and goals.</p>",
        "text": "My IndieWeb call to action from a few days ago drew down a stronger and wider response than this blog’s articles typically receive, and I acknowledge this generous feedback with humility and gratitude.* As I wrote then, I’ve been aware of the IndieWeb movement for only three months, so I now shift my stance towards listening to and reporting this response, rather than pressing my initial point any further.\n\nOther than general words of appreciation (which I appreciate!), the response in both written replies and followup IRC discussion† largely centers around two complementary counterpoints:\n\n\nWhile the IndieWeb group began its work many years ago, its resultant technologies remain very young — Webmention’s W3C certification dates to early 2017 — and they’re still only taking root in the form of varied and tested implementations. Its exposure to the public grows no faster than strictly necessary. Why rush the process, and risk spoiling things?\n\nThe core IndieWeb community focuses on development, not public outreach. It falls to second-order groups to organize around these developed principles and technologies, implementing their own project-specific goals. This will carry the welcome side-effect of testing and proving these technologies — and bringing comfortably gradual exposure to them as the basis for successful applications, rather than mere standards and theories.\n\nThe world already starts to see this with commercial efforts like Micro.Blog, and the wide-open land invites the invention of more services like it. (I might include non-commercial but stable services like Bridgy and Webmention.io into this class, as well.)\n\n\n\nI feel it not my present place to vociferously agree or disagree with these points, which do not necessarily conflict with the observations I voiced in my previous article. I will say how impressed I feel that the core community clearly possesses such a strong sense of cohesion, despite a lack of formal organization, to produce these consensus-based counterarguments so efficiently.\n\nAnd I must admit that they have already inspired me start dreaming up new ways that I might contribute further to IndieWeb on its own apparent terms.\n\nThis was also posted to IndieNews.\n\n\n\n* It also exercised my hand-rolled backfeed software to a great degree, with webmentions rolling in from a number of non-Bridgy sources for the first time — not surprising, I suppose, for a post about the IndieWeb itself! — and breaking my young and fragile libraries this way and that. I wrote many patches very quickly, and for this opportunity, too, I feel humbly grateful.\n\n† Of all the Freenode IRC channels with populations of more than 100 that I’ve spent any time on, the people of #indieweb have proven among the most friendly and welcoming, always quick to answer newcomers’ questions with no trace of mockery, feigned surprise, or bad taste. This has helped a great deal with my own ever-deepening interest in and respect for IndieWeb’s principles and goals."
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "https://miklb.com/indieweb-summit-2016",
      "published": null,
      "wm-received": "2016-06-03T02:11:05Z",
      "wm-id": 343369,
      "wm-source": "https://miklb.com/indieweb-summit-2016",
      "wm-target": "http://webmention.io",
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "",
        "photo": "",
        "url": ""
      },
      "url": "https://miklb.com/2016/06/02/indieweb-summit-2016/",
      "published": null,
      "wm-received": "2016-06-03T02:02:52Z",
      "wm-id": 343368,
      "wm-source": "https://miklb.com/2016/06/02/indieweb-summit-2016/",
      "wm-target": "http://webmention.io",
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Kevin Marks",
        "photo": "http://known.kevinmarks.com/file/9255656669173b7867ab839ee6556f9e",
        "url": "http://known.kevinmarks.com/profile/kevinmarks"
      },
      "url": "http://known.kevinmarks.com/2015/replacing-comments-with-external-posts",
      "published": "2015-10-06T21:20:54",
      "wm-received": "2015-10-06T21:24:08Z",
      "wm-id": 117915,
      "wm-source": "http://known.kevinmarks.com/2015/replacing-comments-with-external-posts",
      "wm-target": "http://webmention.io",
      "name": "replacing comments with external posts",
      "content": {
        "content-type": "text/html",
        "value": " \n                 \n<a href=\"http://known.kevinmarks.com/2015/replacing-comments-with-external-posts\" rel=\"nofollow\">replacing comments with external posts</a>\n             \n                    <p>\n                1 min read \n            </p>\n            <p>Regarding <a href=\"http://motherboard.vice.com/read/im-on-twitter-too\" rel=\"nofollow\">http://motherboard.vice.com/read/im-on-twitter-too</a></p>\n<p>We have an answer to this, in the shape of the<br><a href=\"http://indiewebcamp.com/webmention\" rel=\"nofollow\">http://indiewebcamp.com/webmention</a> protocol.<br>This makes it possible for posts on other sites to notify you when they have commented on an article of yours, through a simple protocol.</p>\n<p>I know this sounds like development work, but there are a couple of services that implement this with small changes to your site's markup.</p>\n<p><a href=\"http://webmention.io\" rel=\"nofollow\">http://webmention.io</a> and <a href=\"http://webmention.herokuapp.com\" rel=\"nofollow\">http://webmention.herokuapp.com</a> will receive these webmentions for you, and store them in a way you can inspect, or embed in your page with javascript.</p>\n<p>In addition, there is a service brid.gy that will map twitter, facebook, g+, instagram posts into webmentions so you see those too, if you want.</p>\n<p>For an example post with a lot of comments received this way, see<br><a href=\"http://www.kevinmarks.com/twitterhatespeech.html\" rel=\"nofollow\">http://www.kevinmarks.com/twitterhatespeech.html</a></p>\n<p>I'd be happy to chat more - come on over to<br><a href=\"http://indiewebcamp.com/irc/today?beta#bottom\" rel=\"nofollow\">http://indiewebcamp.com/irc/today?beta#bottom</a> or track me down elsewhere.</p>\n ",
        "html": " \n                 \n<a href=\"http://known.kevinmarks.com/2015/replacing-comments-with-external-posts\" rel=\"nofollow\">replacing comments with external posts</a>\n             \n                    <p>\n                1 min read \n            </p>\n            <p>Regarding <a href=\"http://motherboard.vice.com/read/im-on-twitter-too\" rel=\"nofollow\">http://motherboard.vice.com/read/im-on-twitter-too</a></p>\n<p>We have an answer to this, in the shape of the<br><a href=\"http://indiewebcamp.com/webmention\" rel=\"nofollow\">http://indiewebcamp.com/webmention</a> protocol.<br>This makes it possible for posts on other sites to notify you when they have commented on an article of yours, through a simple protocol.</p>\n<p>I know this sounds like development work, but there are a couple of services that implement this with small changes to your site's markup.</p>\n<p><a href=\"http://webmention.io\" rel=\"nofollow\">http://webmention.io</a> and <a href=\"http://webmention.herokuapp.com\" rel=\"nofollow\">http://webmention.herokuapp.com</a> will receive these webmentions for you, and store them in a way you can inspect, or embed in your page with javascript.</p>\n<p>In addition, there is a service brid.gy that will map twitter, facebook, g+, instagram posts into webmentions so you see those too, if you want.</p>\n<p>For an example post with a lot of comments received this way, see<br><a href=\"http://www.kevinmarks.com/twitterhatespeech.html\" rel=\"nofollow\">http://www.kevinmarks.com/twitterhatespeech.html</a></p>\n<p>I'd be happy to chat more - come on over to<br><a href=\"http://indiewebcamp.com/irc/today?beta#bottom\" rel=\"nofollow\">http://indiewebcamp.com/irc/today?beta#bottom</a> or track me down elsewhere.</p>\n ",
        "text": null
      },
      "in-reply-to": "http://webmention.io",
      "wm-property": "in-reply-to",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Kartik Prabhu",
        "photo": "https://webmention.io/avatar/kartikprabhu.com/ffadcf7997b6ef6acb6af51686303cc3a2229b03177da939c827604ed0859a18.jpeg",
        "url": "https://kartikprabhu.com/about#me"
      },
      "url": "https://kartikprabhu.com/notes/re-mapkyca-webmention-spam",
      "published": "2015-09-09T11:25:29",
      "wm-received": "2015-09-09T16:28:10Z",
      "wm-id": 100527,
      "wm-source": "https://kartikprabhu.com/notes/re-mapkyca-webmention-spam",
      "wm-target": "http://webmention.io",
      "name": "more likely it is pingback spam. Are you using webmention.io which also handles pingbacks?",
      "content": {
        "content-type": "text/html",
        "value": "more likely it is pingback spam. Are you using <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a> which also handles pingbacks?",
        "html": "more likely it is pingback spam. Are you using <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a> which also handles pingbacks?",
        "text": null
      },
      "in-reply-to": "http://webmention.io",
      "wm-property": "in-reply-to",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Aaron Gustafson",
        "photo": null,
        "url": "https://www.aaron-gustafson.com/about"
      },
      "url": "https://www.aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/",
      "published": null,
      "wm-received": "2015-09-03T19:25:49Z",
      "wm-id": 96834,
      "wm-source": "https://www.aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/",
      "wm-target": "http://webmention.io",
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": null,
        "photo": null,
        "url": null
      },
      "url": "http://douglastarr.com/webmention-spam/",
      "published": null,
      "wm-received": "2015-06-22T02:31:22Z",
      "wm-id": 54027,
      "wm-source": "http://douglastarr.com/webmention-spam/",
      "wm-target": "http://webmention.io",
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "felix schwenzel",
        "photo": "https://webmention.io/avatar/root.wirres.net/7dba00bcadaac7510b53486c0cc2aa4f1aa0df62a85381bb54d328d8fb39c85c.jpeg",
        "url": "http://wirres.net/"
      },
      "url": "http://wirres.net/article/articleview/7709/1/6/",
      "published": "2015-05-30T21:49:09",
      "wm-received": "2015-05-30T22:44:43Z",
      "wm-id": 41372,
      "wm-source": "http://wirres.net/article/articleview/7709/1/6/",
      "wm-target": "http://webmention.io",
      "content": {
        "content-type": "text/html",
        "value": "<p>#<a href=\"https://indiewebcamp.com\" rel=\"nofollow\">indieweb</a>-recherchieren (<a href=\"http://nebenan.hamburg\" rel=\"nofollow\">hierfür</a>) hat in den letzten wochen dazu geführt, dass ix jetzt #<a href=\"http://webmention.io\" rel=\"nofollow\">webmention</a>-e, #<a href=\"https://gist.github.com/adactio/8168e6b78da7b16a4644\" rel=\"nofollow\">micropub</a>-e, #<a href=\"http://microformats.org/wiki/microformats2\" rel=\"nofollow\">mf2</a>-e und #<a href=\"https://indiewebcamp.com/POSSE\" rel=\"nofollow\">POSSE</a>.<br>\n(dieses posting habe ich in #<a href=\"https://quill.p3k.io/\" rel=\"nofollow\">quill</a> geschrieben, es wurde per #<a href=\"https://www.brid.gy\" rel=\"nofollow\">bridgy</a> an <a href=\"https://twitter.com/diplix/status/604736339464982528\" rel=\"nofollow\">twitter</a> und <a href=\"https://www.facebook.com/diplix/posts/10153046466561785\" rel=\"nofollow\">facebook</a> syndiziert. diesen artikel hab ich aber — natürlich — manuell nacheditiert)</p>\n<a rel=\"nofollow\"></a>",
        "html": "<p>#<a href=\"https://indiewebcamp.com\" rel=\"nofollow\">indieweb</a>-recherchieren (<a href=\"http://nebenan.hamburg\" rel=\"nofollow\">hierfür</a>) hat in den letzten wochen dazu geführt, dass ix jetzt #<a href=\"http://webmention.io\" rel=\"nofollow\">webmention</a>-e, #<a href=\"https://gist.github.com/adactio/8168e6b78da7b16a4644\" rel=\"nofollow\">micropub</a>-e, #<a href=\"http://microformats.org/wiki/microformats2\" rel=\"nofollow\">mf2</a>-e und #<a href=\"https://indiewebcamp.com/POSSE\" rel=\"nofollow\">POSSE</a>.<br>\n(dieses posting habe ich in #<a href=\"https://quill.p3k.io/\" rel=\"nofollow\">quill</a> geschrieben, es wurde per #<a href=\"https://www.brid.gy\" rel=\"nofollow\">bridgy</a> an <a href=\"https://twitter.com/diplix/status/604736339464982528\" rel=\"nofollow\">twitter</a> und <a href=\"https://www.facebook.com/diplix/posts/10153046466561785\" rel=\"nofollow\">facebook</a> syndiziert. diesen artikel hab ich aber — natürlich — manuell nacheditiert)</p>\n<a rel=\"nofollow\"></a>",
        "text": null
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Kyle Mahan",
        "photo": "https://webmention.io/avatar/kylewm.com/ef13e9e35ea992adb30241b4f3f29652ab4092d902810afa4e8cff6d029d874e.jpeg",
        "url": "https://kylewm.com/"
      },
      "url": "https://kylewm.com/2015/05/timmmmyboy-respectfully-then-you-aren-t-looking-hard",
      "published": "2015-05-16T09:15:45",
      "wm-received": "2015-05-16T16:16:00Z",
      "wm-id": 33191,
      "wm-source": "https://kylewm.com/2015/05/timmmmyboy-respectfully-then-you-aren-t-looking-hard",
      "wm-target": "http://webmention.io",
      "name": "@timmmmyboy respectfully, then you aren’t looking hard enough. @dshanske’s and @pfefferle’s WP plugins, Bridgy, webmention.io, feverdream.herokuapp.com, and LOTS of open source projects are working hard to make these tools available to non-developers.",
      "content": {
        "content-type": "text/html",
        "value": "<p><a href=\"https://twitter.com/timmmmyboy\" rel=\"nofollow\">@timmmmyboy</a> respectfully, then you aren’t looking hard enough. <a href=\"https://david.shanske.com\" rel=\"nofollow\">@dshanske</a>’s and <a href=\"https://twitter.com/pfefferle\" rel=\"nofollow\">@pfefferle</a>’s WP plugins, Bridgy, <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a>, <a href=\"http://feverdream.herokuapp.com\" rel=\"nofollow\">feverdream.herokuapp.com</a>, and LOTS of open source projects are working hard to make these tools available to non-developers.</p>",
        "html": "<p><a href=\"https://twitter.com/timmmmyboy\" rel=\"nofollow\">@timmmmyboy</a> respectfully, then you aren’t looking hard enough. <a href=\"https://david.shanske.com\" rel=\"nofollow\">@dshanske</a>’s and <a href=\"https://twitter.com/pfefferle\" rel=\"nofollow\">@pfefferle</a>’s WP plugins, Bridgy, <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a>, <a href=\"http://feverdream.herokuapp.com\" rel=\"nofollow\">feverdream.herokuapp.com</a>, and LOTS of open source projects are working hard to make these tools available to non-developers.</p>",
        "text": null
      },
      "in-reply-to": "http://webmention.io",
      "wm-property": "in-reply-to",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "The Dod",
        "photo": "https://dubiousdod.org/indie/static/img/users/dod.png",
        "url": "https://dubiousdod.org/indie"
      },
      "url": "https://dubiousdod.org/indie/2014/12/now-that-aaronpk-has-reopened-https-aaronparecki",
      "published": "2014-12-08T04:47:42",
      "wm-received": "2014-12-07T21:48:28Z",
      "wm-id": 12557,
      "wm-source": "https://dubiousdod.org/indie/2014/12/now-that-aaronpk-has-reopened-https-aaronparecki",
      "wm-target": "http://webmention.io",
      "name": "Now that Aaron Parecki has reopened webmention.io, I can try out WebmentionDressing myself (already found a bug, BTW).",
      "content": {
        "content-type": "text/html",
        "value": " \n        \n        <p>Now that <a href=\"https://aaronparecki.com/\" rel=\"nofollow\">Aaron Parecki</a> has <a href=\"https://aaronparecki.com/notes/2014/11/30/2/webmention\" rel=\"nofollow\">reopened</a> <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a>, I can try out <a href=\"https://dubiousdod.org/indie/2014/11/announcing-webmentiondressing-https-gist-github-com\" rel=\"nofollow\">WebmentionDressing</a> myself (already found a bug, BTW).</p>\n\n        \n\n       ",
        "html": " \n        \n        <p>Now that <a href=\"https://aaronparecki.com/\" rel=\"nofollow\">Aaron Parecki</a> has <a href=\"https://aaronparecki.com/notes/2014/11/30/2/webmention\" rel=\"nofollow\">reopened</a> <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a>, I can try out <a href=\"https://dubiousdod.org/indie/2014/11/announcing-webmentiondressing-https-gist-github-com\" rel=\"nofollow\">WebmentionDressing</a> myself (already found a bug, BTW).</p>\n\n        \n\n       ",
        "text": null
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "The Dod",
        "photo": "https://dubiousdod.org/indie/static/img/users/dod.png",
        "url": "https://dubiousdod.org/indie"
      },
      "url": "https://dubiousdod.org/indie/2014/11/new-indiewebcamp-wiki-page-for-webmentiondressing",
      "published": "2014-11-24T00:10:23",
      "wm-received": "2014-11-23T17:11:42Z",
      "wm-id": 12102,
      "wm-source": "https://dubiousdod.org/indie/2014/11/new-indiewebcamp-wiki-page-for-webmentiondressing",
      "wm-target": "http://webmention.io",
      "name": "New #indieWebCamp wiki page for WebmentionDressing tl;dr - “iframe ready” #mustache-themeable webmention.io display (#js). Fork it in good health.",
      "content": {
        "content-type": "text/html",
        "value": " \n        \n        <p>New #indieWebCamp wiki page for <a href=\"https://indiewebcamp.com/WebmentionDressing\" rel=\"nofollow\">WebmentionDressing</a> tl;dr - “iframe ready” #mustache-themeable <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a> display (#js). Fork it in good health.</p>\n\n        \n\n       ",
        "html": " \n        \n        <p>New #indieWebCamp wiki page for <a href=\"https://indiewebcamp.com/WebmentionDressing\" rel=\"nofollow\">WebmentionDressing</a> tl;dr - “iframe ready” #mustache-themeable <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a> display (#js). Fork it in good health.</p>\n\n        \n\n       ",
        "text": null
      },
      "in-reply-to": "http://webmention.io",
      "wm-property": "in-reply-to",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Kyle Mahan",
        "photo": "https://webmention.io/avatar/kylewm.com/ef13e9e35ea992adb30241b4f3f29652ab4092d902810afa4e8cff6d029d874e.jpeg",
        "url": "https://kylewm.com/"
      },
      "url": "https://kylewm.com/2014/10/thinking-about-tildes",
      "published": "2014-11-04T23:00:49",
      "wm-received": "2014-11-05T07:08:31Z",
      "wm-id": 11390,
      "wm-source": "https://kylewm.com/2014/10/thinking-about-tildes",
      "wm-target": "http://webmention.io",
      "name": "Still thinking about tildes",
      "content": {
        "content-type": "text/html",
        "value": " \n        \n        <p>In thinking about indieweb stuff this past month and what I want to work on, I keep coming back to <a href=\"http://tilde.club\" rel=\"nofollow\">tilde.club</a>… those thousands of people wanting a little piece of server space.</p>\n<p>I think I had more friends with weirdo hand-written html blogs than have ever installed wordpress. In college <a href=\"http://hydrous.net\" rel=\"nofollow\">Ethan Trewhitt</a> hosted a server out of his dorm room (<a href=\"http://hydrous.net\" rel=\"nofollow\">hydrous.net</a>) and gave a few of us tilde accounts on it. <a href=\"http://web.archive.org/web/20061009175851/http://www.hydrous.net/~madmartigan/\" rel=\"nofollow\">~madmartigan</a> had this <em>amazing</em> MS Paint art gallery, (lost forever? <a href=\"http://archive.org\" rel=\"nofollow\">archive.org</a> probably doesn’t store bmp’s), <a href=\"http://web.archive.org/web/20040609123411/http://www.hydrous.net/~skat/blog.php\" rel=\"nofollow\">~skat</a> was always changing its design, <a href=\"https://web.archive.org/web/20040130223018/http://www.hydrous.net/~entropyman/\" rel=\"nofollow\">~entropyman</a> that I think I set up but Roger wanted so much weird crap like a little “small and mean” box with a random picture and mean caption (will be forever “sarah’s drunk” according to the internet archive), <a href=\"http://web.archive.org/web/20050210054634/http://www.ifwinterends.net/\" rel=\"nofollow\">If Winter Ends</a> seems to have embedded LiveJournal in a frame (lol), <a href=\"http://web.archive.org/web/20050213050258/http://www.prism.gatech.edu/~gtg452b/index.html\" rel=\"nofollow\">Techwood Drive Surf Report</a> had deep thoughts and lots of weird sections, <a href=\"http://web.archive.org/web/20040831052253/http://www.angelfire.com/ok5/fabulous/\" rel=\"nofollow\">FAB BOT</a> (still there!), Tommy’s effort to be the only Google result for <a href=\"http://web.archive.org/web/20050213050813/http://www.prism.gatech.edu/~gtg874a/\" rel=\"nofollow\">moomyohipporhinohalophobia</a>.</p>\n<p>I am participating in the #indieweb almost exclusively because I want to get back there. I thought I was all about free software and owning your own data, but honestly I just want the creativity and weirdness back.</p>\n<p>No doubt this is mostly a <a href=\"https://kylewm.com/2014/10/when-people-say-when-the-web-was\" rel=\"nofollow\">social observation</a> rather than a technological one. We had a website project in a required course that everyone had to take, access to hosting space, lots of free time, an illusion of privacy/anonymity, and no real alternative.</p>\n<p>But the technical observations are still kind of interesting </p>\n<ul>\n<li>For a smallish site, it was sometimes easier to learn and write a little HTML than set up and administrate a CMS.</li>\n<li>XML feeds and proper permalink pages would have been difficult to achieve without lots of copy/paste.</li>\n<li>Other than Hydrous.net and Angelfire, the others were ephemeral. We let domains lapse or deleted our shit in a fit of depression or insecurity. &lt;heresy&gt;Maybe that’s OK&lt;/heresy&gt;</li>\n</ul>\n<p>So how can I pull this into my contribution to the indieweb. I like the little CMS that I’ve built here, but I am curious how far one could go without one (microformats make this possibility way more appealing to me than it used to be). And in some ways it would be really nice, like ironically if I didn’t have a CMS, I could post events (one of the post types on my todo list) right now.</p>\n<p>The biggest thing I’d lose would of course be comments. You can send webmentions from a static site using @willnorris’s <a href=\"https://willnorris.com/2014/08/sending-webmentions-golang\" rel=\"nofollow\">command line tool</a> or something like it, but to receive them you pretty much have to execute some code on the server. To that end I started messing around with <a href=\"https://github.com/kylewm/broccoli\" rel=\"nofollow\">Broccoli</a> this weekend, which will be an embeddable comments service, in the Disqus mould. It’s ground that has already been well-trod by <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a> and <a href=\"http://webmention.herokuapp.com\" rel=\"nofollow\">webmention.herokuapp.com</a>, but I think there is still stuff I can add. The code for receiving and parsing mentions already existed in redwind and mf2util, so that part came together was quickly. I have been spending time working on making embedding easy, and eventually I want to have</p>\n<ul>\n<li>an administration dashboard, where you can monitor and moderate mentions</li>\n<li>various notification options (at least email)</li>\n<li>\n<a href=\"http://aaronparecki.com/articles/2013/10/13/1/realtime-indieweb-comments\" rel=\"nofollow\">real-time comments</a>!</li>\n</ul>\n ",
        "html": " \n        \n        <p>In thinking about indieweb stuff this past month and what I want to work on, I keep coming back to <a href=\"http://tilde.club\" rel=\"nofollow\">tilde.club</a>… those thousands of people wanting a little piece of server space.</p>\n<p>I think I had more friends with weirdo hand-written html blogs than have ever installed wordpress. In college <a href=\"http://hydrous.net\" rel=\"nofollow\">Ethan Trewhitt</a> hosted a server out of his dorm room (<a href=\"http://hydrous.net\" rel=\"nofollow\">hydrous.net</a>) and gave a few of us tilde accounts on it. <a href=\"http://web.archive.org/web/20061009175851/http://www.hydrous.net/~madmartigan/\" rel=\"nofollow\">~madmartigan</a> had this <em>amazing</em> MS Paint art gallery, (lost forever? <a href=\"http://archive.org\" rel=\"nofollow\">archive.org</a> probably doesn’t store bmp’s), <a href=\"http://web.archive.org/web/20040609123411/http://www.hydrous.net/~skat/blog.php\" rel=\"nofollow\">~skat</a> was always changing its design, <a href=\"https://web.archive.org/web/20040130223018/http://www.hydrous.net/~entropyman/\" rel=\"nofollow\">~entropyman</a> that I think I set up but Roger wanted so much weird crap like a little “small and mean” box with a random picture and mean caption (will be forever “sarah’s drunk” according to the internet archive), <a href=\"http://web.archive.org/web/20050210054634/http://www.ifwinterends.net/\" rel=\"nofollow\">If Winter Ends</a> seems to have embedded LiveJournal in a frame (lol), <a href=\"http://web.archive.org/web/20050213050258/http://www.prism.gatech.edu/~gtg452b/index.html\" rel=\"nofollow\">Techwood Drive Surf Report</a> had deep thoughts and lots of weird sections, <a href=\"http://web.archive.org/web/20040831052253/http://www.angelfire.com/ok5/fabulous/\" rel=\"nofollow\">FAB BOT</a> (still there!), Tommy’s effort to be the only Google result for <a href=\"http://web.archive.org/web/20050213050813/http://www.prism.gatech.edu/~gtg874a/\" rel=\"nofollow\">moomyohipporhinohalophobia</a>.</p>\n<p>I am participating in the #indieweb almost exclusively because I want to get back there. I thought I was all about free software and owning your own data, but honestly I just want the creativity and weirdness back.</p>\n<p>No doubt this is mostly a <a href=\"https://kylewm.com/2014/10/when-people-say-when-the-web-was\" rel=\"nofollow\">social observation</a> rather than a technological one. We had a website project in a required course that everyone had to take, access to hosting space, lots of free time, an illusion of privacy/anonymity, and no real alternative.</p>\n<p>But the technical observations are still kind of interesting </p>\n<ul>\n<li>For a smallish site, it was sometimes easier to learn and write a little HTML than set up and administrate a CMS.</li>\n<li>XML feeds and proper permalink pages would have been difficult to achieve without lots of copy/paste.</li>\n<li>Other than Hydrous.net and Angelfire, the others were ephemeral. We let domains lapse or deleted our shit in a fit of depression or insecurity. &lt;heresy&gt;Maybe that’s OK&lt;/heresy&gt;</li>\n</ul>\n<p>So how can I pull this into my contribution to the indieweb. I like the little CMS that I’ve built here, but I am curious how far one could go without one (microformats make this possibility way more appealing to me than it used to be). And in some ways it would be really nice, like ironically if I didn’t have a CMS, I could post events (one of the post types on my todo list) right now.</p>\n<p>The biggest thing I’d lose would of course be comments. You can send webmentions from a static site using @willnorris’s <a href=\"https://willnorris.com/2014/08/sending-webmentions-golang\" rel=\"nofollow\">command line tool</a> or something like it, but to receive them you pretty much have to execute some code on the server. To that end I started messing around with <a href=\"https://github.com/kylewm/broccoli\" rel=\"nofollow\">Broccoli</a> this weekend, which will be an embeddable comments service, in the Disqus mould. It’s ground that has already been well-trod by <a href=\"http://webmention.io\" rel=\"nofollow\">webmention.io</a> and <a href=\"http://webmention.herokuapp.com\" rel=\"nofollow\">webmention.herokuapp.com</a>, but I think there is still stuff I can add. The code for receiving and parsing mentions already existed in redwind and mf2util, so that part came together was quickly. I have been spending time working on making embedding easy, and eventually I want to have</p>\n<ul>\n<li>an administration dashboard, where you can monitor and moderate mentions</li>\n<li>various notification options (at least email)</li>\n<li>\n<a href=\"http://aaronparecki.com/articles/2013/10/13/1/realtime-indieweb-comments\" rel=\"nofollow\">real-time comments</a>!</li>\n</ul>\n ",
        "text": null
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    },
    {
      "type": "entry",
      "author": {
        "type": "card",
        "name": "Kyle Mahan",
        "photo": "https://webmention.io/avatar/kylewm.com/ef13e9e35ea992adb30241b4f3f29652ab4092d902810afa4e8cff6d029d874e.jpeg",
        "url": "https://kylewm.com"
      },
      "url": "https://kylewm.com/2014/10/can-t-shake-the-feeling-i-have-been-going-about-this-indieweb-thing-all-wrong",
      "published": "2014-11-04T23:00:49",
      "wm-received": "2014-11-05T07:01:12Z",
      "wm-id": 11389,
      "wm-source": "https://kylewm.com/2014/10/can-t-shake-the-feeling-i-have-been-going-about-this-indieweb-thing-all-wrong",
      "wm-target": "http://webmention.io",
      "name": "Still thinking about tildes",
      "content": {
        "content-type": "text/html",
        "value": "\n        \n        In thinking about indieweb stuff this past month and what I want to work on, I keep coming back to tilde.club… those thousands of people wanting a little piece of server space.\nI think I had more friends with weirdo hand-written html blogs than have ever installed wordpress. In college Ethan Trewhitt hosted a server out of his dorm room (hydrous.net) and gave a few of us tilde accounts on it. ~madmartigan had this amazing MS Paint art gallery, (lost forever? archive.org probably doesn’t store bmp’s), ~skat was always changing its design, ~entropyman that I think I set up but Roger wanted so much weird crap like a little “small and mean” box with a random picture and mean caption (will be forever “sarah’s drunk” according to the internet archive), If Winter Ends seems to have embedded LiveJournal in a frame (lol), Techwood Drive Surf Report had deep thoughts and lots of weird sections, FAB BOT (still there!), Tommy’s effort to be the only Google result for moomyohipporhinohalophobia.\nI am participating in the #indieweb almost exclusively because I want to get back there. I thought I was all about free software and owning your own data, but honestly I just want the creativity and weirdness back.\nNo doubt this is mostly a social observation rather than a technological one. We had a website project in a required course that everyone had to take, access to hosting space, lots of free time, an illusion of privacy/anonymity, and no real alternative.\nBut the technical observations are still kind of interesting \nFor a smallish site, it was sometimes easier to learn and write a little HTML than set up and administrate a CMS.\nXML feeds and proper permalink pages would have been difficult to achieve without lots of copy/paste.\nOther than Hydrous.net and Angelfire, the others were ephemeral. We let domains lapse or deleted our shit in a fit of depression or insecurity. &lt;heresy&gt;Maybe that’s OK&lt;/heresy&gt;\nSo how can I pull this into my contribution to the indieweb. I like the little CMS that I’ve built here, but I am curious how far one could go without one (microformats make this possibility way more appealing to me than it used to be). And in some ways it would be really like, like ironically if I didn’t have a CMS, I could post events (one of the post types on my todo list) right now.\nThe biggest thing I’d lose would of course be comments. You can send webmentions from a static site using @willnorris’s command line tool or something like it, but to receive them you pretty much have to execute some code on the server. To that end I started messing around with Broccoli this weekend, which will be an embeddable comments service, in the Disqus mould. It’s ground that has already been well-trod by webmention.io and webmention.herokuapp.com, but I think there is still stuff I can add. The code for receiving and parsing mentions already existed in redwind and mf2util, so that part came together was quickly. I have been spending time working on making embedding easy, and eventually I want to have\nan administration dashboard, where you can monitor and moderate mentions\nvarious notification options (at least email)\nreal-time comments!\n",
        "html": "\n        \n        In thinking about indieweb stuff this past month and what I want to work on, I keep coming back to tilde.club… those thousands of people wanting a little piece of server space.\nI think I had more friends with weirdo hand-written html blogs than have ever installed wordpress. In college Ethan Trewhitt hosted a server out of his dorm room (hydrous.net) and gave a few of us tilde accounts on it. ~madmartigan had this amazing MS Paint art gallery, (lost forever? archive.org probably doesn’t store bmp’s), ~skat was always changing its design, ~entropyman that I think I set up but Roger wanted so much weird crap like a little “small and mean” box with a random picture and mean caption (will be forever “sarah’s drunk” according to the internet archive), If Winter Ends seems to have embedded LiveJournal in a frame (lol), Techwood Drive Surf Report had deep thoughts and lots of weird sections, FAB BOT (still there!), Tommy’s effort to be the only Google result for moomyohipporhinohalophobia.\nI am participating in the #indieweb almost exclusively because I want to get back there. I thought I was all about free software and owning your own data, but honestly I just want the creativity and weirdness back.\nNo doubt this is mostly a social observation rather than a technological one. We had a website project in a required course that everyone had to take, access to hosting space, lots of free time, an illusion of privacy/anonymity, and no real alternative.\nBut the technical observations are still kind of interesting \nFor a smallish site, it was sometimes easier to learn and write a little HTML than set up and administrate a CMS.\nXML feeds and proper permalink pages would have been difficult to achieve without lots of copy/paste.\nOther than Hydrous.net and Angelfire, the others were ephemeral. We let domains lapse or deleted our shit in a fit of depression or insecurity. &lt;heresy&gt;Maybe that’s OK&lt;/heresy&gt;\nSo how can I pull this into my contribution to the indieweb. I like the little CMS that I’ve built here, but I am curious how far one could go without one (microformats make this possibility way more appealing to me than it used to be). And in some ways it would be really like, like ironically if I didn’t have a CMS, I could post events (one of the post types on my todo list) right now.\nThe biggest thing I’d lose would of course be comments. You can send webmentions from a static site using @willnorris’s command line tool or something like it, but to receive them you pretty much have to execute some code on the server. To that end I started messing around with Broccoli this weekend, which will be an embeddable comments service, in the Disqus mould. It’s ground that has already been well-trod by webmention.io and webmention.herokuapp.com, but I think there is still stuff I can add. The code for receiving and parsing mentions already existed in redwind and mf2util, so that part came together was quickly. I have been spending time working on making embedding easy, and eventually I want to have\nan administration dashboard, where you can monitor and moderate mentions\nvarious notification options (at least email)\nreal-time comments!\n",
        "text": null
      },
      "mention-of": "http://webmention.io",
      "wm-property": "mention-of",
      "wm-private": false
    }
  ]
}
